/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { HttpResponse, http } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "http://localhost:8081/api";
const MAX_ARRAY_LENGTH = 20;

// Map to store counters for each API endpoint
const apiCounters = new Map();

const next = (apiKey) => {
  let currentCount = apiCounters.get(apiKey) ?? 0;
  if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
    currentCount = 0;
  }
  apiCounters.set(apiKey, currentCount + 1);
  return currentCount;
};

export const handlers = [
  http.get(`${baseURL}/v1/autocomplete/accounts`, async () => {
    const resultArray = [
      [getGetAccountsAc200Response(), { status: 200 }],
      [getGetAccountsAc400Response(), { status: 400 }],
      [getGetAccountsAc401Response(), { status: 401 }],
      [getGetAccountsAc404Response(), { status: 404 }],
      [getGetAccountsAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/accounts`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/bills`, async () => {
    const resultArray = [
      [getGetBillsAc200Response(), { status: 200 }],
      [getGetBillsAc400Response(), { status: 400 }],
      [getGetBillsAc401Response(), { status: 401 }],
      [getGetBillsAc404Response(), { status: 404 }],
      [getGetBillsAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/autocomplete/bills`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/budgets`, async () => {
    const resultArray = [
      [getGetBudgetsAc200Response(), { status: 200 }],
      [getGetBudgetsAc400Response(), { status: 400 }],
      [getGetBudgetsAc401Response(), { status: 401 }],
      [getGetBudgetsAc404Response(), { status: 404 }],
      [getGetBudgetsAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/autocomplete/budgets`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/categories`, async () => {
    const resultArray = [
      [getGetCategoriesAc200Response(), { status: 200 }],
      [getGetCategoriesAc400Response(), { status: 400 }],
      [getGetCategoriesAc401Response(), { status: 401 }],
      [getGetCategoriesAc404Response(), { status: 404 }],
      [getGetCategoriesAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/categories`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/currencies`, async () => {
    const resultArray = [
      [getGetCurrenciesAc200Response(), { status: 200 }],
      [getGetCurrenciesAc400Response(), { status: 400 }],
      [getGetCurrenciesAc401Response(), { status: 401 }],
      [getGetCurrenciesAc404Response(), { status: 404 }],
      [getGetCurrenciesAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/currencies`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/currencies-with-code`, async () => {
    const resultArray = [
      [getGetCurrenciesCodeAc200Response(), { status: 200 }],
      [getGetCurrenciesCodeAc400Response(), { status: 400 }],
      [getGetCurrenciesCodeAc401Response(), { status: 401 }],
      [getGetCurrenciesCodeAc404Response(), { status: 404 }],
      [getGetCurrenciesCodeAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/currencies-with-code`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/object-groups`, async () => {
    const resultArray = [
      [getGetObjectGroupsAc200Response(), { status: 200 }],
      [getGetObjectGroupsAc400Response(), { status: 400 }],
      [getGetObjectGroupsAc401Response(), { status: 401 }],
      [getGetObjectGroupsAc404Response(), { status: 404 }],
      [getGetObjectGroupsAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/object-groups`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/piggy-banks`, async () => {
    const resultArray = [
      [getGetPiggiesAc200Response(), { status: 200 }],
      [getGetPiggiesAc400Response(), { status: 400 }],
      [getGetPiggiesAc401Response(), { status: 401 }],
      [getGetPiggiesAc404Response(), { status: 404 }],
      [getGetPiggiesAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/piggy-banks`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/piggy-banks-with-balance`, async () => {
    const resultArray = [
      [getGetPiggiesBalanceAc200Response(), { status: 200 }],
      [getGetPiggiesBalanceAc400Response(), { status: 400 }],
      [getGetPiggiesBalanceAc401Response(), { status: 401 }],
      [getGetPiggiesBalanceAc404Response(), { status: 404 }],
      [getGetPiggiesBalanceAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/piggy-banks-with-balance`) %
          resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/recurring`, async () => {
    const resultArray = [
      [getGetRecurringAc200Response(), { status: 200 }],
      [getGetRecurringAc400Response(), { status: 400 }],
      [getGetRecurringAc401Response(), { status: 401 }],
      [getGetRecurringAc404Response(), { status: 404 }],
      [getGetRecurringAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/recurring`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/rule-groups`, async () => {
    const resultArray = [
      [getGetRuleGroupsAc200Response(), { status: 200 }],
      [getGetRuleGroupsAc400Response(), { status: 400 }],
      [getGetRuleGroupsAc401Response(), { status: 401 }],
      [getGetRuleGroupsAc404Response(), { status: 404 }],
      [getGetRuleGroupsAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/rule-groups`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/rules`, async () => {
    const resultArray = [
      [getGetRulesAc200Response(), { status: 200 }],
      [getGetRulesAc400Response(), { status: 400 }],
      [getGetRulesAc401Response(), { status: 401 }],
      [getGetRulesAc404Response(), { status: 404 }],
      [getGetRulesAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/autocomplete/rules`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/tags`, async () => {
    const resultArray = [
      [getGetTagAc200Response(), { status: 200 }],
      [getGetTagAc400Response(), { status: 400 }],
      [getGetTagAc401Response(), { status: 401 }],
      [getGetTagAc404Response(), { status: 404 }],
      [getGetTagAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/autocomplete/tags`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/transaction-types`, async () => {
    const resultArray = [
      [getGetTransactionTypesAc200Response(), { status: 200 }],
      [getGetTransactionTypesAc400Response(), { status: 400 }],
      [getGetTransactionTypesAc401Response(), { status: 401 }],
      [getGetTransactionTypesAc404Response(), { status: 404 }],
      [getGetTransactionTypesAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/transaction-types`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/transactions`, async () => {
    const resultArray = [
      [getGetTransactionsAc200Response(), { status: 200 }],
      [getGetTransactionsAc400Response(), { status: 400 }],
      [getGetTransactionsAc401Response(), { status: 401 }],
      [getGetTransactionsAc404Response(), { status: 404 }],
      [getGetTransactionsAc500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/autocomplete/transactions-with-id`, async () => {
    const resultArray = [
      [getGetTransactionsIdac200Response(), { status: 200 }],
      [getGetTransactionsIdac400Response(), { status: 400 }],
      [getGetTransactionsIdac401Response(), { status: 401 }],
      [getGetTransactionsIdac404Response(), { status: 404 }],
      [getGetTransactionsIdac500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/autocomplete/transactions-with-id`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/chart/account/overview`, async () => {
    const resultArray = [
      [getGetChartAccountOverview200Response(), { status: 200 }],
      [getGetChartAccountOverview400Response(), { status: 400 }],
      [getGetChartAccountOverview401Response(), { status: 401 }],
      [getGetChartAccountOverview404Response(), { status: 404 }],
      [getGetChartAccountOverview500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/chart/account/overview`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/v1/data/bulk/transactions`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getBulkUpdateTransactions400Response(), { status: 400 }],
      [getBulkUpdateTransactions401Response(), { status: 401 }],
      [getBulkUpdateTransactions404Response(), { status: 404 }],
      [getBulkUpdateTransactions500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /v1/data/bulk/transactions`) % resultArray.length
      ],
    );
  }),
  http.delete(`${baseURL}/v1/data/destroy`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDestroyData400Response(), { status: 400 }],
      [getDestroyData401Response(), { status: 401 }],
      [getDestroyData404Response(), { status: 404 }],
      [getDestroyData500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/data/destroy`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/data/export/accounts`, async () => {
    const resultArray = [
      [getExportAccounts200Response(), { status: 200 }],
      [getExportAccounts400Response(), { status: 400 }],
      [getExportAccounts401Response(), { status: 401 }],
      [getExportAccounts404Response(), { status: 404 }],
      [getExportAccounts500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/data/export/accounts`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/data/export/bills`, async () => {
    const resultArray = [
      [getExportBills200Response(), { status: 200 }],
      [getExportBills400Response(), { status: 400 }],
      [getExportBills401Response(), { status: 401 }],
      [getExportBills404Response(), { status: 404 }],
      [getExportBills500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/data/export/bills`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/data/export/budgets`, async () => {
    const resultArray = [
      [getExportBudgets200Response(), { status: 200 }],
      [getExportBudgets400Response(), { status: 400 }],
      [getExportBudgets401Response(), { status: 401 }],
      [getExportBudgets404Response(), { status: 404 }],
      [getExportBudgets500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/data/export/budgets`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/data/export/categories`, async () => {
    const resultArray = [
      [getExportCategories200Response(), { status: 200 }],
      [getExportCategories400Response(), { status: 400 }],
      [getExportCategories401Response(), { status: 401 }],
      [getExportCategories404Response(), { status: 404 }],
      [getExportCategories500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/data/export/categories`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/data/export/piggy-banks`, async () => {
    const resultArray = [
      [getExportPiggies200Response(), { status: 200 }],
      [getExportPiggies400Response(), { status: 400 }],
      [getExportPiggies401Response(), { status: 401 }],
      [getExportPiggies404Response(), { status: 404 }],
      [getExportPiggies500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/data/export/piggy-banks`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/data/export/recurring`, async () => {
    const resultArray = [
      [getExportRecurring200Response(), { status: 200 }],
      [getExportRecurring400Response(), { status: 400 }],
      [getExportRecurring401Response(), { status: 401 }],
      [getExportRecurring404Response(), { status: 404 }],
      [getExportRecurring500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/data/export/recurring`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/data/export/rules`, async () => {
    const resultArray = [
      [getExportRules200Response(), { status: 200 }],
      [getExportRules400Response(), { status: 400 }],
      [getExportRules401Response(), { status: 401 }],
      [getExportRules404Response(), { status: 404 }],
      [getExportRules500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/data/export/rules`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/data/export/tags`, async () => {
    const resultArray = [
      [getExportTags200Response(), { status: 200 }],
      [getExportTags400Response(), { status: 400 }],
      [getExportTags401Response(), { status: 401 }],
      [getExportTags404Response(), { status: 404 }],
      [getExportTags500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/data/export/tags`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/data/export/transactions`, async () => {
    const resultArray = [
      [getExportTransactions200Response(), { status: 200 }],
      [getExportTransactions400Response(), { status: 400 }],
      [getExportTransactions401Response(), { status: 401 }],
      [getExportTransactions404Response(), { status: 404 }],
      [getExportTransactions500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/data/export/transactions`) % resultArray.length
      ],
    );
  }),
  http.delete(`${baseURL}/v1/data/purge`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getPurgeData400Response(), { status: 400 }],
      [getPurgeData401Response(), { status: 401 }],
      [getPurgeData500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/data/purge`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/expense`, async () => {
    const resultArray = [
      [getInsightExpenseExpense200Response(), { status: 200 }],
      [getInsightExpenseExpense400Response(), { status: 400 }],
      [getInsightExpenseExpense401Response(), { status: 401 }],
      [getInsightExpenseExpense404Response(), { status: 404 }],
      [getInsightExpenseExpense500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/expense`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/asset`, async () => {
    const resultArray = [
      [getInsightExpenseAsset200Response(), { status: 200 }],
      [getInsightExpenseAsset400Response(), { status: 400 }],
      [getInsightExpenseAsset401Response(), { status: 401 }],
      [getInsightExpenseAsset404Response(), { status: 404 }],
      [getInsightExpenseAsset500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/asset`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/income/revenue`, async () => {
    const resultArray = [
      [getInsightIncomeRevenue200Response(), { status: 200 }],
      [getInsightIncomeRevenue400Response(), { status: 400 }],
      [getInsightIncomeRevenue401Response(), { status: 401 }],
      [getInsightIncomeRevenue404Response(), { status: 404 }],
      [getInsightIncomeRevenue500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/income/revenue`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/income/asset`, async () => {
    const resultArray = [
      [getInsightIncomeAsset200Response(), { status: 200 }],
      [getInsightIncomeAsset400Response(), { status: 400 }],
      [getInsightIncomeAsset401Response(), { status: 401 }],
      [getInsightIncomeAsset404Response(), { status: 404 }],
      [getInsightIncomeAsset500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/insight/income/asset`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/insight/transfer/asset`, async () => {
    const resultArray = [
      [getInsightTransfers200Response(), { status: 200 }],
      [getInsightTransfers400Response(), { status: 400 }],
      [getInsightTransfers401Response(), { status: 401 }],
      [getInsightTransfers404Response(), { status: 404 }],
      [getInsightTransfers500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/transfer/asset`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/bill`, async () => {
    const resultArray = [
      [getInsightExpenseBill200Response(), { status: 200 }],
      [getInsightExpenseBill400Response(), { status: 400 }],
      [getInsightExpenseBill401Response(), { status: 401 }],
      [getInsightExpenseBill404Response(), { status: 404 }],
      [getInsightExpenseBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/insight/expense/bill`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/no-bill`, async () => {
    const resultArray = [
      [getInsightExpenseNoBill200Response(), { status: 200 }],
      [getInsightExpenseNoBill400Response(), { status: 400 }],
      [getInsightExpenseNoBill401Response(), { status: 401 }],
      [getInsightExpenseNoBill404Response(), { status: 404 }],
      [getInsightExpenseNoBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/no-bill`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/budget`, async () => {
    const resultArray = [
      [getInsightExpenseBudget200Response(), { status: 200 }],
      [getInsightExpenseBudget400Response(), { status: 400 }],
      [getInsightExpenseBudget401Response(), { status: 401 }],
      [getInsightExpenseBudget404Response(), { status: 404 }],
      [getInsightExpenseBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/budget`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/no-budget`, async () => {
    const resultArray = [
      [getInsightExpenseNoBudget200Response(), { status: 200 }],
      [getInsightExpenseNoBudget400Response(), { status: 400 }],
      [getInsightExpenseNoBudget401Response(), { status: 401 }],
      [getInsightExpenseNoBudget404Response(), { status: 404 }],
      [getInsightExpenseNoBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/no-budget`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/category`, async () => {
    const resultArray = [
      [getInsightExpenseCategory200Response(), { status: 200 }],
      [getInsightExpenseCategory400Response(), { status: 400 }],
      [getInsightExpenseCategory401Response(), { status: 401 }],
      [getInsightExpenseCategory404Response(), { status: 404 }],
      [getInsightExpenseCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/category`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/no-category`, async () => {
    const resultArray = [
      [getInsightExpenseNoCategory200Response(), { status: 200 }],
      [getInsightExpenseNoCategory400Response(), { status: 400 }],
      [getInsightExpenseNoCategory401Response(), { status: 401 }],
      [getInsightExpenseNoCategory404Response(), { status: 404 }],
      [getInsightExpenseNoCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/no-category`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/income/category`, async () => {
    const resultArray = [
      [getInsightIncomeCategory200Response(), { status: 200 }],
      [getInsightIncomeCategory400Response(), { status: 400 }],
      [getInsightIncomeCategory401Response(), { status: 401 }],
      [getInsightIncomeCategory404Response(), { status: 404 }],
      [getInsightIncomeCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/income/category`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/income/no-category`, async () => {
    const resultArray = [
      [getInsightIncomeNoCategory200Response(), { status: 200 }],
      [getInsightIncomeNoCategory400Response(), { status: 400 }],
      [getInsightIncomeNoCategory401Response(), { status: 401 }],
      [getInsightIncomeNoCategory404Response(), { status: 404 }],
      [getInsightIncomeNoCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/income/no-category`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/transfer/category`, async () => {
    const resultArray = [
      [getInsightTransferCategory200Response(), { status: 200 }],
      [getInsightTransferCategory400Response(), { status: 400 }],
      [getInsightTransferCategory401Response(), { status: 401 }],
      [getInsightTransferCategory404Response(), { status: 404 }],
      [getInsightTransferCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/transfer/category`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/transfer/no-category`, async () => {
    const resultArray = [
      [getInsightTransferNoCategory200Response(), { status: 200 }],
      [getInsightTransferNoCategory400Response(), { status: 400 }],
      [getInsightTransferNoCategory401Response(), { status: 401 }],
      [getInsightTransferNoCategory404Response(), { status: 404 }],
      [getInsightTransferNoCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/transfer/no-category`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/tag`, async () => {
    const resultArray = [
      [getInsightExpenseTag200Response(), { status: 200 }],
      [getInsightExpenseTag400Response(), { status: 400 }],
      [getInsightExpenseTag401Response(), { status: 401 }],
      [getInsightExpenseTag404Response(), { status: 404 }],
      [getInsightExpenseTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/insight/expense/tag`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/no-tag`, async () => {
    const resultArray = [
      [getInsightExpenseNoTag200Response(), { status: 200 }],
      [getInsightExpenseNoTag400Response(), { status: 400 }],
      [getInsightExpenseNoTag401Response(), { status: 401 }],
      [getInsightExpenseNoTag404Response(), { status: 404 }],
      [getInsightExpenseNoTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/no-tag`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/income/tag`, async () => {
    const resultArray = [
      [getInsightIncomeTag200Response(), { status: 200 }],
      [getInsightIncomeTag400Response(), { status: 400 }],
      [getInsightIncomeTag401Response(), { status: 401 }],
      [getInsightIncomeTag404Response(), { status: 404 }],
      [getInsightIncomeTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/insight/income/tag`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/insight/income/no-tag`, async () => {
    const resultArray = [
      [getInsightIncomeNoTag200Response(), { status: 200 }],
      [getInsightIncomeNoTag400Response(), { status: 400 }],
      [getInsightIncomeNoTag401Response(), { status: 401 }],
      [getInsightIncomeNoTag404Response(), { status: 404 }],
      [getInsightIncomeNoTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/income/no-tag`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/transfer/tag`, async () => {
    const resultArray = [
      [getInsightTransferTag200Response(), { status: 200 }],
      [getInsightTransferTag400Response(), { status: 400 }],
      [getInsightTransferTag401Response(), { status: 401 }],
      [getInsightTransferTag404Response(), { status: 404 }],
      [getInsightTransferTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/insight/transfer/tag`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/insight/transfer/no-tag`, async () => {
    const resultArray = [
      [getInsightTransferNoTag200Response(), { status: 200 }],
      [getInsightTransferNoTag400Response(), { status: 400 }],
      [getInsightTransferNoTag401Response(), { status: 401 }],
      [getInsightTransferNoTag404Response(), { status: 404 }],
      [getInsightTransferNoTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/transfer/no-tag`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/expense/total`, async () => {
    const resultArray = [
      [getInsightExpenseTotal200Response(), { status: 200 }],
      [getInsightExpenseTotal400Response(), { status: 400 }],
      [getInsightExpenseTotal401Response(), { status: 401 }],
      [getInsightExpenseTotal404Response(), { status: 404 }],
      [getInsightExpenseTotal500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/expense/total`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/insight/income/total`, async () => {
    const resultArray = [
      [getInsightIncomeTotal200Response(), { status: 200 }],
      [getInsightIncomeTotal400Response(), { status: 400 }],
      [getInsightIncomeTotal401Response(), { status: 401 }],
      [getInsightIncomeTotal404Response(), { status: 404 }],
      [getInsightIncomeTotal500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/insight/income/total`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/insight/transfer/total`, async () => {
    const resultArray = [
      [getInsightTransferTotal200Response(), { status: 200 }],
      [getInsightTransferTotal400Response(), { status: 400 }],
      [getInsightTransferTotal401Response(), { status: 401 }],
      [getInsightTransferTotal404Response(), { status: 404 }],
      [getInsightTransferTotal500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/insight/transfer/total`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/accounts/:id/transactions`, async () => {
    const resultArray = [
      [getListTransactionByAccount200Response(), { status: 200 }],
      [getListTransactionByAccount400Response(), { status: 400 }],
      [getListTransactionByAccount401Response(), { status: 401 }],
      [getListTransactionByAccount404Response(), { status: 404 }],
      [getListTransactionByAccount500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/accounts/:id/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/accounts/:id/attachments`, async () => {
    const resultArray = [
      [getListAttachmentByAccount200Response(), { status: 200 }],
      [getListAttachmentByAccount400Response(), { status: 400 }],
      [getListAttachmentByAccount401Response(), { status: 401 }],
      [getListAttachmentByAccount404Response(), { status: 404 }],
      [getListAttachmentByAccount500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/accounts/:id/attachments`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/accounts/:id/piggy-banks`, async () => {
    const resultArray = [
      [getListPiggyBankByAccount200Response(), { status: 200 }],
      [getListPiggyBankByAccount400Response(), { status: 400 }],
      [getListPiggyBankByAccount401Response(), { status: 401 }],
      [getListPiggyBankByAccount404Response(), { status: 404 }],
      [getListPiggyBankByAccount500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/accounts/:id/piggy-banks`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/accounts`, async () => {
    const resultArray = [
      [getListAccount200Response(), { status: 200 }],
      [getListAccount400Response(), { status: 400 }],
      [getListAccount401Response(), { status: 401 }],
      [getListAccount404Response(), { status: 404 }],
      [getListAccount500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/accounts`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/accounts`, async () => {
    const resultArray = [
      [getStoreAccount200Response(), { status: 200 }],
      [getStoreAccount400Response(), { status: 400 }],
      [getStoreAccount401Response(), { status: 401 }],
      [getStoreAccount404Response(), { status: 404 }],
      [getStoreAccount422Response(), { status: 422 }],
      [getStoreAccount500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/accounts`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/accounts/:id`, async () => {
    const resultArray = [
      [getGetAccount200Response(), { status: 200 }],
      [getGetAccount400Response(), { status: 400 }],
      [getGetAccount401Response(), { status: 401 }],
      [getGetAccount404Response(), { status: 404 }],
      [getGetAccount500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/accounts/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/accounts/:id`, async () => {
    const resultArray = [
      [getUpdateAccount200Response(), { status: 200 }],
      [getUpdateAccount400Response(), { status: 400 }],
      [getUpdateAccount401Response(), { status: 401 }],
      [getUpdateAccount404Response(), { status: 404 }],
      [getUpdateAccount422Response(), { status: 422 }],
      [getUpdateAccount500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/accounts/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/accounts/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteAccount400Response(), { status: 400 }],
      [getDeleteAccount401Response(), { status: 401 }],
      [getDeleteAccount404Response(), { status: 404 }],
      [getDeleteAccount500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/accounts/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/attachments`, async () => {
    const resultArray = [
      [getListAttachment200Response(), { status: 200 }],
      [getListAttachment400Response(), { status: 400 }],
      [getListAttachment401Response(), { status: 401 }],
      [getListAttachment404Response(), { status: 404 }],
      [getListAttachment500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/attachments`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/attachments`, async () => {
    const resultArray = [
      [getStoreAttachment200Response(), { status: 200 }],
      [getStoreAttachment400Response(), { status: 400 }],
      [getStoreAttachment401Response(), { status: 401 }],
      [getStoreAttachment404Response(), { status: 404 }],
      [getStoreAttachment422Response(), { status: 422 }],
      [getStoreAttachment500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/attachments`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/attachments/:id`, async () => {
    const resultArray = [
      [getGetAttachment200Response(), { status: 200 }],
      [getGetAttachment400Response(), { status: 400 }],
      [getGetAttachment401Response(), { status: 401 }],
      [getGetAttachment404Response(), { status: 404 }],
      [getGetAttachment500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/attachments/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/attachments/:id`, async () => {
    const resultArray = [
      [getUpdateAttachment200Response(), { status: 200 }],
      [getUpdateAttachment400Response(), { status: 400 }],
      [getUpdateAttachment401Response(), { status: 401 }],
      [getUpdateAttachment404Response(), { status: 404 }],
      [getUpdateAttachment422Response(), { status: 422 }],
      [getUpdateAttachment500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/attachments/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/attachments/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteAttachment400Response(), { status: 400 }],
      [getDeleteAttachment401Response(), { status: 401 }],
      [getDeleteAttachment404Response(), { status: 404 }],
      [getDeleteAttachment500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/attachments/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/attachments/:id/download`, async () => {
    const resultArray = [
      [getDownloadAttachment200Response(), { status: 200 }],
      [getDownloadAttachment400Response(), { status: 400 }],
      [getDownloadAttachment401Response(), { status: 401 }],
      [getDownloadAttachment404Response(), { status: 404 }],
      [getDownloadAttachment500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/attachments/:id/download`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/v1/attachments/:id/upload`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getUploadAttachment400Response(), { status: 400 }],
      [getUploadAttachment401Response(), { status: 401 }],
      [getUploadAttachment404Response(), { status: 404 }],
      [getUploadAttachment422Response(), { status: 422 }],
      [getUploadAttachment500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /v1/attachments/:id/upload`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/available-budgets`, async () => {
    const resultArray = [
      [getListAvailableBudget200Response(), { status: 200 }],
      [getListAvailableBudget400Response(), { status: 400 }],
      [getListAvailableBudget401Response(), { status: 401 }],
      [getListAvailableBudget404Response(), { status: 404 }],
      [getListAvailableBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/available-budgets`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/available-budgets/:id`, async () => {
    const resultArray = [
      [getGetAvailableBudget200Response(), { status: 200 }],
      [getGetAvailableBudget400Response(), { status: 400 }],
      [getGetAvailableBudget401Response(), { status: 401 }],
      [getGetAvailableBudget404Response(), { status: 404 }],
      [getGetAvailableBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/available-budgets/:id`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/bills/:id/attachments`, async () => {
    const resultArray = [
      [getListAttachmentByBill200Response(), { status: 200 }],
      [getListAttachmentByBill400Response(), { status: 400 }],
      [getListAttachmentByBill401Response(), { status: 401 }],
      [getListAttachmentByBill404Response(), { status: 404 }],
      [getListAttachmentByBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/bills/:id/attachments`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/bills/:id/rules`, async () => {
    const resultArray = [
      [getListRuleByBill200Response(), { status: 200 }],
      [getListRuleByBill400Response(), { status: 400 }],
      [getListRuleByBill401Response(), { status: 401 }],
      [getListRuleByBill404Response(), { status: 404 }],
      [getListRuleByBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/bills/:id/rules`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/bills/:id/transactions`, async () => {
    const resultArray = [
      [getListTransactionByBill200Response(), { status: 200 }],
      [getListTransactionByBill400Response(), { status: 400 }],
      [getListTransactionByBill401Response(), { status: 401 }],
      [getListTransactionByBill404Response(), { status: 404 }],
      [getListTransactionByBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/bills/:id/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/bills`, async () => {
    const resultArray = [
      [getListBill200Response(), { status: 200 }],
      [getListBill400Response(), { status: 400 }],
      [getListBill401Response(), { status: 401 }],
      [getListBill404Response(), { status: 404 }],
      [getListBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/bills`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/bills`, async () => {
    const resultArray = [
      [getStoreBill200Response(), { status: 200 }],
      [getStoreBill400Response(), { status: 400 }],
      [getStoreBill401Response(), { status: 401 }],
      [getStoreBill404Response(), { status: 404 }],
      [getStoreBill422Response(), { status: 422 }],
      [getStoreBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/bills`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/bills/:id`, async () => {
    const resultArray = [
      [getGetBill200Response(), { status: 200 }],
      [getGetBill400Response(), { status: 400 }],
      [getGetBill401Response(), { status: 401 }],
      [getGetBill404Response(), { status: 404 }],
      [getGetBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/bills/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/bills/:id`, async () => {
    const resultArray = [
      [getUpdateBill200Response(), { status: 200 }],
      [getUpdateBill400Response(), { status: 400 }],
      [getUpdateBill401Response(), { status: 401 }],
      [getUpdateBill404Response(), { status: 404 }],
      [getUpdateBill422Response(), { status: 422 }],
      [getUpdateBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/bills/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/bills/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteBill400Response(), { status: 400 }],
      [getDeleteBill401Response(), { status: 401 }],
      [getDeleteBill404Response(), { status: 404 }],
      [getDeleteBill500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/bills/:id`) % resultArray.length],
    );
  }),
  http.get(
    `${baseURL}/v1/budgets/:id/limits/:limitId/transactions`,
    async () => {
      const resultArray = [
        [getListTransactionByBudgetLimit200Response(), { status: 200 }],
        [getListTransactionByBudgetLimit400Response(), { status: 400 }],
        [getListTransactionByBudgetLimit401Response(), { status: 401 }],
        [getListTransactionByBudgetLimit404Response(), { status: 404 }],
        [getListTransactionByBudgetLimit500Response(), { status: 500 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`get /v1/budgets/:id/limits/:limitId/transactions`) %
            resultArray.length
        ],
      );
    },
  ),
  http.get(`${baseURL}/v1/budgets/:id/limits`, async () => {
    const resultArray = [
      [getListBudgetLimitByBudget200Response(), { status: 200 }],
      [getListBudgetLimitByBudget400Response(), { status: 400 }],
      [getListBudgetLimitByBudget401Response(), { status: 401 }],
      [getListBudgetLimitByBudget404Response(), { status: 404 }],
      [getListBudgetLimitByBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/budgets/:id/limits`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/budgets/:id/limits`, async () => {
    const resultArray = [
      [getStoreBudgetLimit200Response(), { status: 200 }],
      [getStoreBudgetLimit400Response(), { status: 400 }],
      [getStoreBudgetLimit401Response(), { status: 401 }],
      [getStoreBudgetLimit404Response(), { status: 404 }],
      [getStoreBudgetLimit422Response(), { status: 422 }],
      [getStoreBudgetLimit500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/budgets/:id/limits`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/budgets/:id/limits/:limitId`, async () => {
    const resultArray = [
      [getGetBudgetLimit200Response(), { status: 200 }],
      [getGetBudgetLimit400Response(), { status: 400 }],
      [getGetBudgetLimit401Response(), { status: 401 }],
      [getGetBudgetLimit404Response(), { status: 404 }],
      [getGetBudgetLimit500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/budgets/:id/limits/:limitId`) % resultArray.length
      ],
    );
  }),
  http.put(`${baseURL}/v1/budgets/:id/limits/:limitId`, async () => {
    const resultArray = [
      [getUpdateBudgetLimit200Response(), { status: 200 }],
      [getUpdateBudgetLimit400Response(), { status: 400 }],
      [getUpdateBudgetLimit401Response(), { status: 401 }],
      [getUpdateBudgetLimit404Response(), { status: 404 }],
      [getUpdateBudgetLimit422Response(), { status: 422 }],
      [getUpdateBudgetLimit500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`put /v1/budgets/:id/limits/:limitId`) % resultArray.length
      ],
    );
  }),
  http.delete(`${baseURL}/v1/budgets/:id/limits/:limitId`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteBudgetLimit400Response(), { status: 400 }],
      [getDeleteBudgetLimit401Response(), { status: 401 }],
      [getDeleteBudgetLimit404Response(), { status: 404 }],
      [getDeleteBudgetLimit500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`delete /v1/budgets/:id/limits/:limitId`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/budget-limits`, async () => {
    const resultArray = [
      [getListBudgetLimit200Response(), { status: 200 }],
      [getListBudgetLimit400Response(), { status: 400 }],
      [getListBudgetLimit401Response(), { status: 401 }],
      [getListBudgetLimit404Response(), { status: 404 }],
      [getListBudgetLimit500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/budget-limits`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/budgets/:id/transactions`, async () => {
    const resultArray = [
      [getListTransactionByBudget200Response(), { status: 200 }],
      [getListTransactionByBudget400Response(), { status: 400 }],
      [getListTransactionByBudget401Response(), { status: 401 }],
      [getListTransactionByBudget404Response(), { status: 404 }],
      [getListTransactionByBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/budgets/:id/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/budgets/:id/attachments`, async () => {
    const resultArray = [
      [getListAttachmentByBudget200Response(), { status: 200 }],
      [getListAttachmentByBudget400Response(), { status: 400 }],
      [getListAttachmentByBudget401Response(), { status: 401 }],
      [getListAttachmentByBudget404Response(), { status: 404 }],
      [getListAttachmentByBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/budgets/:id/attachments`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/budgets`, async () => {
    const resultArray = [
      [getListBudget200Response(), { status: 200 }],
      [getListBudget400Response(), { status: 400 }],
      [getListBudget401Response(), { status: 401 }],
      [getListBudget404Response(), { status: 404 }],
      [getListBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/budgets`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/budgets`, async () => {
    const resultArray = [
      [getStoreBudget200Response(), { status: 200 }],
      [getStoreBudget400Response(), { status: 400 }],
      [getStoreBudget401Response(), { status: 401 }],
      [getStoreBudget404Response(), { status: 404 }],
      [getStoreBudget422Response(), { status: 422 }],
      [getStoreBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/budgets`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/budgets/:id`, async () => {
    const resultArray = [
      [getGetBudget200Response(), { status: 200 }],
      [getGetBudget400Response(), { status: 400 }],
      [getGetBudget401Response(), { status: 401 }],
      [getGetBudget404Response(), { status: 404 }],
      [getGetBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/budgets/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/budgets/:id`, async () => {
    const resultArray = [
      [getUpdateBudget200Response(), { status: 200 }],
      [getUpdateBudget400Response(), { status: 400 }],
      [getUpdateBudget401Response(), { status: 401 }],
      [getUpdateBudget404Response(), { status: 404 }],
      [getUpdateBudget422Response(), { status: 422 }],
      [getUpdateBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/budgets/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/budgets/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteBudget400Response(), { status: 400 }],
      [getDeleteBudget401Response(), { status: 401 }],
      [getDeleteBudget404Response(), { status: 404 }],
      [getDeleteBudget500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/budgets/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/categories/:id/transactions`, async () => {
    const resultArray = [
      [getListTransactionByCategory200Response(), { status: 200 }],
      [getListTransactionByCategory400Response(), { status: 400 }],
      [getListTransactionByCategory401Response(), { status: 401 }],
      [getListTransactionByCategory404Response(), { status: 404 }],
      [getListTransactionByCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/categories/:id/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/categories/:id/attachments`, async () => {
    const resultArray = [
      [getListAttachmentByCategory200Response(), { status: 200 }],
      [getListAttachmentByCategory400Response(), { status: 400 }],
      [getListAttachmentByCategory401Response(), { status: 401 }],
      [getListAttachmentByCategory404Response(), { status: 404 }],
      [getListAttachmentByCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/categories/:id/attachments`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/categories`, async () => {
    const resultArray = [
      [getListCategory200Response(), { status: 200 }],
      [getListCategory400Response(), { status: 400 }],
      [getListCategory401Response(), { status: 401 }],
      [getListCategory404Response(), { status: 404 }],
      [getListCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/categories`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/categories`, async () => {
    const resultArray = [
      [getStoreCategory200Response(), { status: 200 }],
      [getStoreCategory400Response(), { status: 400 }],
      [getStoreCategory401Response(), { status: 401 }],
      [getStoreCategory404Response(), { status: 404 }],
      [getStoreCategory422Response(), { status: 422 }],
      [getStoreCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/categories`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/categories/:id`, async () => {
    const resultArray = [
      [getGetCategory200Response(), { status: 200 }],
      [getGetCategory400Response(), { status: 400 }],
      [getGetCategory401Response(), { status: 401 }],
      [getGetCategory404Response(), { status: 404 }],
      [getGetCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/categories/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/categories/:id`, async () => {
    const resultArray = [
      [getUpdateCategory200Response(), { status: 200 }],
      [getUpdateCategory400Response(), { status: 400 }],
      [getUpdateCategory401Response(), { status: 401 }],
      [getUpdateCategory404Response(), { status: 404 }],
      [getUpdateCategory422Response(), { status: 422 }],
      [getUpdateCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/categories/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/categories/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteCategory400Response(), { status: 400 }],
      [getDeleteCategory401Response(), { status: 401 }],
      [getDeleteCategory404Response(), { status: 404 }],
      [getDeleteCategory500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/categories/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/link-types/:id/transactions`, async () => {
    const resultArray = [
      [getListTransactionByLinkType200Response(), { status: 200 }],
      [getListTransactionByLinkType400Response(), { status: 400 }],
      [getListTransactionByLinkType401Response(), { status: 401 }],
      [getListTransactionByLinkType404Response(), { status: 404 }],
      [getListTransactionByLinkType500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/link-types/:id/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/link-types`, async () => {
    const resultArray = [
      [getListLinkType200Response(), { status: 200 }],
      [getListLinkType400Response(), { status: 400 }],
      [getListLinkType401Response(), { status: 401 }],
      [getListLinkType404Response(), { status: 404 }],
      [getListLinkType500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/link-types`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/link-types`, async () => {
    const resultArray = [
      [getStoreLinkType200Response(), { status: 200 }],
      [getStoreLinkType400Response(), { status: 400 }],
      [getStoreLinkType401Response(), { status: 401 }],
      [getStoreLinkType404Response(), { status: 404 }],
      [getStoreLinkType422Response(), { status: 422 }],
      [getStoreLinkType500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/link-types`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/link-types/:id`, async () => {
    const resultArray = [
      [getGetLinkType200Response(), { status: 200 }],
      [getGetLinkType400Response(), { status: 400 }],
      [getGetLinkType401Response(), { status: 401 }],
      [getGetLinkType404Response(), { status: 404 }],
      [getGetLinkType500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/link-types/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/link-types/:id`, async () => {
    const resultArray = [
      [getUpdateLinkType200Response(), { status: 200 }],
      [getUpdateLinkType400Response(), { status: 400 }],
      [getUpdateLinkType401Response(), { status: 401 }],
      [getUpdateLinkType404Response(), { status: 404 }],
      [getUpdateLinkType422Response(), { status: 422 }],
      [getUpdateLinkType500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/link-types/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/link-types/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteLinkType400Response(), { status: 400 }],
      [getDeleteLinkType401Response(), { status: 401 }],
      [getDeleteLinkType404Response(), { status: 404 }],
      [getDeleteLinkType500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/link-types/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/transaction-links`, async () => {
    const resultArray = [
      [getListTransactionLink200Response(), { status: 200 }],
      [getListTransactionLink400Response(), { status: 400 }],
      [getListTransactionLink401Response(), { status: 401 }],
      [getListTransactionLink404Response(), { status: 404 }],
      [getListTransactionLink500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/transaction-links`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/transaction-links`, async () => {
    const resultArray = [
      [getStoreTransactionLink200Response(), { status: 200 }],
      [getStoreTransactionLink400Response(), { status: 400 }],
      [getStoreTransactionLink401Response(), { status: 401 }],
      [getStoreTransactionLink404Response(), { status: 404 }],
      [getStoreTransactionLink422Response(), { status: 422 }],
      [getStoreTransactionLink500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/transaction-links`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/transaction-links/:id`, async () => {
    const resultArray = [
      [getGetTransactionLink200Response(), { status: 200 }],
      [getGetTransactionLink400Response(), { status: 400 }],
      [getGetTransactionLink401Response(), { status: 401 }],
      [getGetTransactionLink404Response(), { status: 404 }],
      [getGetTransactionLink500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/transaction-links/:id`) % resultArray.length
      ],
    );
  }),
  http.delete(`${baseURL}/v1/transaction-links/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteTransactionLink400Response(), { status: 400 }],
      [getDeleteTransactionLink401Response(), { status: 401 }],
      [getDeleteTransactionLink404Response(), { status: 404 }],
      [getDeleteTransactionLink500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`delete /v1/transaction-links/:id`) % resultArray.length
      ],
    );
  }),
  http.put(`${baseURL}/v1/transaction-links/:id`, async () => {
    const resultArray = [
      [getUpdateTransactionLink200Response(), { status: 200 }],
      [getUpdateTransactionLink400Response(), { status: 400 }],
      [getUpdateTransactionLink401Response(), { status: 401 }],
      [getUpdateTransactionLink404Response(), { status: 404 }],
      [getUpdateTransactionLink422Response(), { status: 422 }],
      [getUpdateTransactionLink500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`put /v1/transaction-links/:id`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/object-groups/:id/piggy-banks`, async () => {
    const resultArray = [
      [getListPiggyBankByObjectGroup200Response(), { status: 200 }],
      [getListPiggyBankByObjectGroup400Response(), { status: 400 }],
      [getListPiggyBankByObjectGroup401Response(), { status: 401 }],
      [getListPiggyBankByObjectGroup404Response(), { status: 404 }],
      [getListPiggyBankByObjectGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/object-groups/:id/piggy-banks`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/object-groups/:id/bills`, async () => {
    const resultArray = [
      [getListBillByObjectGroup200Response(), { status: 200 }],
      [getListBillByObjectGroup400Response(), { status: 400 }],
      [getListBillByObjectGroup401Response(), { status: 401 }],
      [getListBillByObjectGroup404Response(), { status: 404 }],
      [getListBillByObjectGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/object-groups/:id/bills`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/object-groups`, async () => {
    const resultArray = [
      [getListObjectGroups200Response(), { status: 200 }],
      [getListObjectGroups400Response(), { status: 400 }],
      [getListObjectGroups401Response(), { status: 401 }],
      [getListObjectGroups404Response(), { status: 404 }],
      [getListObjectGroups500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/object-groups`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/object-groups/:id`, async () => {
    const resultArray = [
      [getGetObjectGroup200Response(), { status: 200 }],
      [getGetObjectGroup400Response(), { status: 400 }],
      [getGetObjectGroup401Response(), { status: 401 }],
      [getGetObjectGroup404Response(), { status: 404 }],
      [getGetObjectGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/object-groups/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/object-groups/:id`, async () => {
    const resultArray = [
      [getUpdateObjectGroup200Response(), { status: 200 }],
      [getUpdateObjectGroup400Response(), { status: 400 }],
      [getUpdateObjectGroup401Response(), { status: 401 }],
      [getUpdateObjectGroup404Response(), { status: 404 }],
      [getUpdateObjectGroup422Response(), { status: 422 }],
      [getUpdateObjectGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/object-groups/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/object-groups/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteObjectGroup400Response(), { status: 400 }],
      [getDeleteObjectGroup401Response(), { status: 401 }],
      [getDeleteObjectGroup404Response(), { status: 404 }],
      [getDeleteObjectGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/object-groups/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/piggy-banks/:id/events`, async () => {
    const resultArray = [
      [getListEventByPiggyBank200Response(), { status: 200 }],
      [getListEventByPiggyBank400Response(), { status: 400 }],
      [getListEventByPiggyBank401Response(), { status: 401 }],
      [getListEventByPiggyBank404Response(), { status: 404 }],
      [getListEventByPiggyBank500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/piggy-banks/:id/events`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/piggy-banks/:id/attachments`, async () => {
    const resultArray = [
      [getListAttachmentByPiggyBank200Response(), { status: 200 }],
      [getListAttachmentByPiggyBank400Response(), { status: 400 }],
      [getListAttachmentByPiggyBank401Response(), { status: 401 }],
      [getListAttachmentByPiggyBank404Response(), { status: 404 }],
      [getListAttachmentByPiggyBank500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/piggy-banks/:id/attachments`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/piggy-banks`, async () => {
    const resultArray = [
      [getListPiggyBank200Response(), { status: 200 }],
      [getListPiggyBank400Response(), { status: 400 }],
      [getListPiggyBank401Response(), { status: 401 }],
      [getListPiggyBank404Response(), { status: 404 }],
      [getListPiggyBank500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/piggy-banks`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/piggy-banks`, async () => {
    const resultArray = [
      [getStorePiggyBank200Response(), { status: 200 }],
      [getStorePiggyBank400Response(), { status: 400 }],
      [getStorePiggyBank401Response(), { status: 401 }],
      [getStorePiggyBank404Response(), { status: 404 }],
      [getStorePiggyBank422Response(), { status: 422 }],
      [getStorePiggyBank500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/piggy-banks`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/piggy-banks/:id`, async () => {
    const resultArray = [
      [getGetPiggyBank200Response(), { status: 200 }],
      [getGetPiggyBank400Response(), { status: 400 }],
      [getGetPiggyBank401Response(), { status: 401 }],
      [getGetPiggyBank404Response(), { status: 404 }],
      [getGetPiggyBank500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/piggy-banks/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/piggy-banks/:id`, async () => {
    const resultArray = [
      [getUpdatePiggyBank200Response(), { status: 200 }],
      [getUpdatePiggyBank400Response(), { status: 400 }],
      [getUpdatePiggyBank401Response(), { status: 401 }],
      [getUpdatePiggyBank404Response(), { status: 404 }],
      [getUpdatePiggyBank422Response(), { status: 422 }],
      [getUpdatePiggyBank500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/piggy-banks/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/piggy-banks/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeletePiggyBank400Response(), { status: 400 }],
      [getDeletePiggyBank401Response(), { status: 401 }],
      [getDeletePiggyBank404Response(), { status: 404 }],
      [getDeletePiggyBank500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/piggy-banks/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/recurrences/:id/transactions`, async () => {
    const resultArray = [
      [getListTransactionByRecurrence200Response(), { status: 200 }],
      [getListTransactionByRecurrence400Response(), { status: 400 }],
      [getListTransactionByRecurrence401Response(), { status: 401 }],
      [getListTransactionByRecurrence404Response(), { status: 404 }],
      [getListTransactionByRecurrence500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/recurrences/:id/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/recurrences`, async () => {
    const resultArray = [
      [getListRecurrence200Response(), { status: 200 }],
      [getListRecurrence400Response(), { status: 400 }],
      [getListRecurrence401Response(), { status: 401 }],
      [getListRecurrence404Response(), { status: 404 }],
      [getListRecurrence500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/recurrences`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/recurrences`, async () => {
    const resultArray = [
      [getStoreRecurrence200Response(), { status: 200 }],
      [getStoreRecurrence400Response(), { status: 400 }],
      [getStoreRecurrence401Response(), { status: 401 }],
      [getStoreRecurrence404Response(), { status: 404 }],
      [getStoreRecurrence422Response(), { status: 422 }],
      [getStoreRecurrence500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/recurrences`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/recurrences/:id`, async () => {
    const resultArray = [
      [getGetRecurrence200Response(), { status: 200 }],
      [getGetRecurrence400Response(), { status: 400 }],
      [getGetRecurrence401Response(), { status: 401 }],
      [getGetRecurrence404Response(), { status: 404 }],
      [getGetRecurrence500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/recurrences/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/recurrences/:id`, async () => {
    const resultArray = [
      [getUpdateRecurrence200Response(), { status: 200 }],
      [getUpdateRecurrence400Response(), { status: 400 }],
      [getUpdateRecurrence401Response(), { status: 401 }],
      [getUpdateRecurrence404Response(), { status: 404 }],
      [getUpdateRecurrence422Response(), { status: 422 }],
      [getUpdateRecurrence500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/recurrences/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/recurrences/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteRecurrence400Response(), { status: 400 }],
      [getDeleteRecurrence401Response(), { status: 401 }],
      [getDeleteRecurrence404Response(), { status: 404 }],
      [getDeleteRecurrence500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/recurrences/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/rule-groups/:id/rules`, async () => {
    const resultArray = [
      [getListRuleByGroup200Response(), { status: 200 }],
      [getListRuleByGroup400Response(), { status: 400 }],
      [getListRuleByGroup401Response(), { status: 401 }],
      [getListRuleByGroup404Response(), { status: 404 }],
      [getListRuleByGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/rule-groups/:id/rules`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/rule-groups/:id/test`, async () => {
    const resultArray = [
      [getTestRuleGroup200Response(), { status: 200 }],
      [getTestRuleGroup400Response(), { status: 400 }],
      [getTestRuleGroup401Response(), { status: 401 }],
      [getTestRuleGroup404Response(), { status: 404 }],
      [getTestRuleGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/rule-groups/:id/test`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/rule-groups/:id/trigger`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getFireRuleGroup400Response(), { status: 400 }],
      [getFireRuleGroup401Response(), { status: 401 }],
      [getFireRuleGroup404Response(), { status: 404 }],
      [getFireRuleGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /v1/rule-groups/:id/trigger`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/rule-groups`, async () => {
    const resultArray = [
      [getListRuleGroup200Response(), { status: 200 }],
      [getListRuleGroup400Response(), { status: 400 }],
      [getListRuleGroup401Response(), { status: 401 }],
      [getListRuleGroup404Response(), { status: 404 }],
      [getListRuleGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/rule-groups`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/rule-groups`, async () => {
    const resultArray = [
      [getStoreRuleGroup200Response(), { status: 200 }],
      [getStoreRuleGroup400Response(), { status: 400 }],
      [getStoreRuleGroup401Response(), { status: 401 }],
      [getStoreRuleGroup404Response(), { status: 404 }],
      [getStoreRuleGroup422Response(), { status: 422 }],
      [getStoreRuleGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/rule-groups`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/rule-groups/:id`, async () => {
    const resultArray = [
      [getGetRuleGroup200Response(), { status: 200 }],
      [getGetRuleGroup400Response(), { status: 400 }],
      [getGetRuleGroup401Response(), { status: 401 }],
      [getGetRuleGroup404Response(), { status: 404 }],
      [getGetRuleGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/rule-groups/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/rule-groups/:id`, async () => {
    const resultArray = [
      [getUpdateRuleGroup200Response(), { status: 200 }],
      [getUpdateRuleGroup400Response(), { status: 400 }],
      [getUpdateRuleGroup401Response(), { status: 401 }],
      [getUpdateRuleGroup404Response(), { status: 404 }],
      [getUpdateRuleGroup422Response(), { status: 422 }],
      [getUpdateRuleGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/rule-groups/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/rule-groups/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteRuleGroup400Response(), { status: 400 }],
      [getDeleteRuleGroup401Response(), { status: 401 }],
      [getDeleteRuleGroup404Response(), { status: 404 }],
      [getDeleteRuleGroup500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/rule-groups/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/rules/:id/test`, async () => {
    const resultArray = [
      [getTestRule200Response(), { status: 200 }],
      [getTestRule400Response(), { status: 400 }],
      [getTestRule401Response(), { status: 401 }],
      [getTestRule404Response(), { status: 404 }],
      [getTestRule500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/rules/:id/test`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/rules/:id/trigger`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getFireRule400Response(), { status: 400 }],
      [getFireRule401Response(), { status: 401 }],
      [getFireRule404Response(), { status: 404 }],
      [getFireRule500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/rules/:id/trigger`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/rules`, async () => {
    const resultArray = [
      [getListRule200Response(), { status: 200 }],
      [getListRule400Response(), { status: 400 }],
      [getListRule401Response(), { status: 401 }],
      [getListRule404Response(), { status: 404 }],
      [getListRule500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/rules`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/rules`, async () => {
    const resultArray = [
      [getStoreRule200Response(), { status: 200 }],
      [getStoreRule400Response(), { status: 400 }],
      [getStoreRule401Response(), { status: 401 }],
      [getStoreRule404Response(), { status: 404 }],
      [getStoreRule422Response(), { status: 422 }],
      [getStoreRule500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/rules`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/rules/:id`, async () => {
    const resultArray = [
      [getGetRule200Response(), { status: 200 }],
      [getGetRule400Response(), { status: 400 }],
      [getGetRule401Response(), { status: 401 }],
      [getGetRule404Response(), { status: 404 }],
      [getGetRule500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/rules/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/rules/:id`, async () => {
    const resultArray = [
      [getUpdateRule200Response(), { status: 200 }],
      [getUpdateRule400Response(), { status: 400 }],
      [getUpdateRule401Response(), { status: 401 }],
      [getUpdateRule404Response(), { status: 404 }],
      [getUpdateRule422Response(), { status: 422 }],
      [getUpdateRule500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/rules/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/rules/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteRule400Response(), { status: 400 }],
      [getDeleteRule401Response(), { status: 401 }],
      [getDeleteRule404Response(), { status: 404 }],
      [getDeleteRule500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/rules/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/tags/:tag/attachments`, async () => {
    const resultArray = [
      [getListAttachmentByTag200Response(), { status: 200 }],
      [getListAttachmentByTag400Response(), { status: 400 }],
      [getListAttachmentByTag401Response(), { status: 401 }],
      [getListAttachmentByTag404Response(), { status: 404 }],
      [getListAttachmentByTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/tags/:tag/attachments`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/tags/:tag/transactions`, async () => {
    const resultArray = [
      [getListTransactionByTag200Response(), { status: 200 }],
      [getListTransactionByTag400Response(), { status: 400 }],
      [getListTransactionByTag401Response(), { status: 401 }],
      [getListTransactionByTag404Response(), { status: 404 }],
      [getListTransactionByTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/tags/:tag/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/tags`, async () => {
    const resultArray = [
      [getListTag200Response(), { status: 200 }],
      [getListTag400Response(), { status: 400 }],
      [getListTag401Response(), { status: 401 }],
      [getListTag404Response(), { status: 404 }],
      [getListTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/tags`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/tags`, async () => {
    const resultArray = [
      [getStoreTag200Response(), { status: 200 }],
      [getStoreTag400Response(), { status: 400 }],
      [getStoreTag401Response(), { status: 401 }],
      [getStoreTag404Response(), { status: 404 }],
      [getStoreTag422Response(), { status: 422 }],
      [getStoreTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/tags`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/tags/:tag`, async () => {
    const resultArray = [
      [getGetTag200Response(), { status: 200 }],
      [getGetTag400Response(), { status: 400 }],
      [getGetTag401Response(), { status: 401 }],
      [getGetTag404Response(), { status: 404 }],
      [getGetTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/tags/:tag`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/tags/:tag`, async () => {
    const resultArray = [
      [getUpdateTag200Response(), { status: 200 }],
      [getUpdateTag400Response(), { status: 400 }],
      [getUpdateTag401Response(), { status: 401 }],
      [getUpdateTag404Response(), { status: 404 }],
      [getUpdateTag422Response(), { status: 422 }],
      [getUpdateTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/tags/:tag`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/tags/:tag`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteTag400Response(), { status: 400 }],
      [getDeleteTag401Response(), { status: 401 }],
      [getDeleteTag404Response(), { status: 404 }],
      [getDeleteTag500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/tags/:tag`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/currencies/:code/accounts`, async () => {
    const resultArray = [
      [getListAccountByCurrency200Response(), { status: 200 }],
      [getListAccountByCurrency400Response(), { status: 400 }],
      [getListAccountByCurrency401Response(), { status: 401 }],
      [getListAccountByCurrency404Response(), { status: 404 }],
      [getListAccountByCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/currencies/:code/accounts`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/currencies/:code/available-budgets`, async () => {
    const resultArray = [
      [getListAvailableBudgetByCurrency200Response(), { status: 200 }],
      [getListAvailableBudgetByCurrency400Response(), { status: 400 }],
      [getListAvailableBudgetByCurrency401Response(), { status: 401 }],
      [getListAvailableBudgetByCurrency404Response(), { status: 404 }],
      [getListAvailableBudgetByCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/currencies/:code/available-budgets`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/currencies/:code/bills`, async () => {
    const resultArray = [
      [getListBillByCurrency200Response(), { status: 200 }],
      [getListBillByCurrency400Response(), { status: 400 }],
      [getListBillByCurrency401Response(), { status: 401 }],
      [getListBillByCurrency404Response(), { status: 404 }],
      [getListBillByCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/currencies/:code/bills`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/currencies/:code/budget_limits`, async () => {
    const resultArray = [
      [getListBudgetLimitByCurrency200Response(), { status: 200 }],
      [getListBudgetLimitByCurrency400Response(), { status: 400 }],
      [getListBudgetLimitByCurrency401Response(), { status: 401 }],
      [getListBudgetLimitByCurrency404Response(), { status: 404 }],
      [getListBudgetLimitByCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/currencies/:code/budget_limits`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/currencies/:code/recurrences`, async () => {
    const resultArray = [
      [getListRecurrenceByCurrency200Response(), { status: 200 }],
      [getListRecurrenceByCurrency400Response(), { status: 400 }],
      [getListRecurrenceByCurrency401Response(), { status: 401 }],
      [getListRecurrenceByCurrency404Response(), { status: 404 }],
      [getListRecurrenceByCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/currencies/:code/recurrences`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/currencies/:code/rules`, async () => {
    const resultArray = [
      [getListRuleByCurrency200Response(), { status: 200 }],
      [getListRuleByCurrency400Response(), { status: 400 }],
      [getListRuleByCurrency401Response(), { status: 401 }],
      [getListRuleByCurrency404Response(), { status: 404 }],
      [getListRuleByCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/currencies/:code/rules`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/currencies/:code/transactions`, async () => {
    const resultArray = [
      [getListTransactionByCurrency200Response(), { status: 200 }],
      [getListTransactionByCurrency400Response(), { status: 400 }],
      [getListTransactionByCurrency401Response(), { status: 401 }],
      [getListTransactionByCurrency404Response(), { status: 404 }],
      [getListTransactionByCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/currencies/:code/transactions`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/currencies`, async () => {
    const resultArray = [
      [getListCurrency200Response(), { status: 200 }],
      [getListCurrency400Response(), { status: 400 }],
      [getListCurrency401Response(), { status: 401 }],
      [getListCurrency404Response(), { status: 404 }],
      [getListCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/currencies`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/currencies`, async () => {
    const resultArray = [
      [getStoreCurrency200Response(), { status: 200 }],
      [getStoreCurrency400Response(), { status: 400 }],
      [getStoreCurrency401Response(), { status: 401 }],
      [getStoreCurrency404Response(), { status: 404 }],
      [getStoreCurrency422Response(), { status: 422 }],
      [getStoreCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/currencies`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/currencies/:code/enable`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getEnableCurrency400Response(), { status: 400 }],
      [getEnableCurrency401Response(), { status: 401 }],
      [getEnableCurrency404Response(), { status: 404 }],
      [getEnableCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /v1/currencies/:code/enable`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/v1/currencies/:code/disable`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDisableCurrency400Response(), { status: 400 }],
      [getDisableCurrency401Response(), { status: 401 }],
      [getDisableCurrency404Response(), { status: 404 }],
      [undefined, { status: 409 }],
      [getDisableCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /v1/currencies/:code/disable`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/v1/currencies/:code/default`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDefaultCurrency400Response(), { status: 400 }],
      [getDefaultCurrency401Response(), { status: 401 }],
      [getDefaultCurrency404Response(), { status: 404 }],
      [getDefaultCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /v1/currencies/:code/default`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/currencies/:code`, async () => {
    const resultArray = [
      [getGetCurrency200Response(), { status: 200 }],
      [getGetCurrency400Response(), { status: 400 }],
      [getGetCurrency401Response(), { status: 401 }],
      [getGetCurrency404Response(), { status: 404 }],
      [getGetCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/currencies/:code`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/currencies/:code`, async () => {
    const resultArray = [
      [getUpdateCurrency200Response(), { status: 200 }],
      [getUpdateCurrency400Response(), { status: 400 }],
      [getUpdateCurrency401Response(), { status: 401 }],
      [getUpdateCurrency404Response(), { status: 404 }],
      [getUpdateCurrency422Response(), { status: 422 }],
      [getUpdateCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/currencies/:code`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/currencies/:code`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteCurrency400Response(), { status: 400 }],
      [getDeleteCurrency401Response(), { status: 401 }],
      [getDeleteCurrency404Response(), { status: 404 }],
      [getDeleteCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/currencies/:code`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/currencies/default`, async () => {
    const resultArray = [
      [getGetDefaultCurrency200Response(), { status: 200 }],
      [getGetDefaultCurrency400Response(), { status: 400 }],
      [getGetDefaultCurrency401Response(), { status: 401 }],
      [getGetDefaultCurrency404Response(), { status: 404 }],
      [getGetDefaultCurrency500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/currencies/default`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/transaction-journals/:id/links`, async () => {
    const resultArray = [
      [getListLinksByJournal200Response(), { status: 200 }],
      [getListLinksByJournal400Response(), { status: 400 }],
      [getListLinksByJournal401Response(), { status: 401 }],
      [getListLinksByJournal404Response(), { status: 404 }],
      [getListLinksByJournal500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/transaction-journals/:id/links`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/transaction-journals/:id`, async () => {
    const resultArray = [
      [getGetTransactionByJournal200Response(), { status: 200 }],
      [getGetTransactionByJournal400Response(), { status: 400 }],
      [getGetTransactionByJournal401Response(), { status: 401 }],
      [getGetTransactionByJournal404Response(), { status: 404 }],
      [getGetTransactionByJournal500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/transaction-journals/:id`) % resultArray.length
      ],
    );
  }),
  http.delete(`${baseURL}/v1/transaction-journals/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteTransactionJournal400Response(), { status: 400 }],
      [getDeleteTransactionJournal401Response(), { status: 401 }],
      [getDeleteTransactionJournal404Response(), { status: 404 }],
      [getDeleteTransactionJournal500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`delete /v1/transaction-journals/:id`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/transactions/:id/attachments`, async () => {
    const resultArray = [
      [getListAttachmentByTransaction200Response(), { status: 200 }],
      [getListAttachmentByTransaction400Response(), { status: 400 }],
      [getListAttachmentByTransaction401Response(), { status: 401 }],
      [getListAttachmentByTransaction404Response(), { status: 404 }],
      [getListAttachmentByTransaction500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/transactions/:id/attachments`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/transactions/:id/piggy-bank-events`, async () => {
    const resultArray = [
      [getListEventByTransaction200Response(), { status: 200 }],
      [getListEventByTransaction400Response(), { status: 400 }],
      [getListEventByTransaction401Response(), { status: 401 }],
      [getListEventByTransaction404Response(), { status: 404 }],
      [getListEventByTransaction500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/transactions/:id/piggy-bank-events`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/transactions`, async () => {
    const resultArray = [
      [getListTransaction200Response(), { status: 200 }],
      [getListTransaction400Response(), { status: 400 }],
      [getListTransaction401Response(), { status: 401 }],
      [getListTransaction404Response(), { status: 404 }],
      [getListTransaction500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/transactions`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/transactions`, async () => {
    const resultArray = [
      [getStoreTransaction200Response(), { status: 200 }],
      [getStoreTransaction400Response(), { status: 400 }],
      [getStoreTransaction401Response(), { status: 401 }],
      [getStoreTransaction404Response(), { status: 404 }],
      [getStoreTransaction422Response(), { status: 422 }],
      [getStoreTransaction500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/transactions`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/transactions/:id`, async () => {
    const resultArray = [
      [getGetTransaction200Response(), { status: 200 }],
      [getGetTransaction400Response(), { status: 400 }],
      [getGetTransaction401Response(), { status: 401 }],
      [getGetTransaction404Response(), { status: 404 }],
      [getGetTransaction500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/transactions/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/transactions/:id`, async () => {
    const resultArray = [
      [getUpdateTransaction200Response(), { status: 200 }],
      [getUpdateTransaction400Response(), { status: 400 }],
      [getUpdateTransaction401Response(), { status: 401 }],
      [getUpdateTransaction404Response(), { status: 404 }],
      [getUpdateTransaction422Response(), { status: 422 }],
      [getUpdateTransaction500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/transactions/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/transactions/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteTransaction400Response(), { status: 400 }],
      [getDeleteTransaction401Response(), { status: 401 }],
      [getDeleteTransaction404Response(), { status: 404 }],
      [getDeleteTransaction500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/transactions/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/search/accounts`, async () => {
    const resultArray = [
      [getSearchAccounts200Response(), { status: 200 }],
      [getSearchAccounts400Response(), { status: 400 }],
      [getSearchAccounts401Response(), { status: 401 }],
      [getSearchAccounts404Response(), { status: 404 }],
      [getSearchAccounts500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/search/accounts`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/search/transactions`, async () => {
    const resultArray = [
      [getSearchTransactions200Response(), { status: 200 }],
      [getSearchTransactions400Response(), { status: 400 }],
      [getSearchTransactions401Response(), { status: 401 }],
      [getSearchTransactions404Response(), { status: 404 }],
      [getSearchTransactions500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/search/transactions`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/summary/basic`, async () => {
    const resultArray = [
      [getGetBasicSummary200Response(), { status: 200 }],
      [getGetBasicSummary400Response(), { status: 400 }],
      [getGetBasicSummary401Response(), { status: 401 }],
      [getGetBasicSummary404Response(), { status: 404 }],
      [getGetBasicSummary500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/summary/basic`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/about`, async () => {
    const resultArray = [
      [getGetAbout200Response(), { status: 200 }],
      [getGetAbout400Response(), { status: 400 }],
      [getGetAbout401Response(), { status: 401 }],
      [getGetAbout404Response(), { status: 404 }],
      [getGetAbout500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/about`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/about/user`, async () => {
    const resultArray = [
      [getGetCurrentUser200Response(), { status: 200 }],
      [getGetCurrentUser400Response(), { status: 400 }],
      [getGetCurrentUser401Response(), { status: 401 }],
      [getGetCurrentUser404Response(), { status: 404 }],
      [getGetCurrentUser500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/about/user`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/configuration`, async () => {
    const resultArray = [
      [getGetConfiguration200Response(), { status: 200 }],
      [getGetConfiguration400Response(), { status: 400 }],
      [getGetConfiguration401Response(), { status: 401 }],
      [getGetConfiguration404Response(), { status: 404 }],
      [getGetConfiguration500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/configuration`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/configuration/:name`, async () => {
    const resultArray = [
      [getGetSingleConfiguration200Response(), { status: 200 }],
      [getGetSingleConfiguration400Response(), { status: 400 }],
      [getGetSingleConfiguration401Response(), { status: 401 }],
      [getGetSingleConfiguration404Response(), { status: 404 }],
      [getGetSingleConfiguration500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/configuration/:name`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/configuration/:name`, async () => {
    const resultArray = [
      [getSetConfiguration200Response(), { status: 200 }],
      [getSetConfiguration400Response(), { status: 400 }],
      [getSetConfiguration401Response(), { status: 401 }],
      [getSetConfiguration404Response(), { status: 404 }],
      [getSetConfiguration422Response(), { status: 422 }],
      [getSetConfiguration500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/configuration/:name`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/cron/:cliToken`, async () => {
    const resultArray = [
      [getGetCron200Response(), { status: 200 }],
      [getGetCron400Response(), { status: 400 }],
      [getGetCron401Response(), { status: 401 }],
      [getGetCron404Response(), { status: 404 }],
      [getGetCron500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/cron/:cliToken`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/users`, async () => {
    const resultArray = [
      [getListUser200Response(), { status: 200 }],
      [getListUser400Response(), { status: 400 }],
      [getListUser401Response(), { status: 401 }],
      [getListUser404Response(), { status: 404 }],
      [getListUser500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/users`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/users`, async () => {
    const resultArray = [
      [getStoreUser200Response(), { status: 200 }],
      [getStoreUser400Response(), { status: 400 }],
      [getStoreUser401Response(), { status: 401 }],
      [getStoreUser404Response(), { status: 404 }],
      [getStoreUser422Response(), { status: 422 }],
      [getStoreUser500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/users`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/users/:id`, async () => {
    const resultArray = [
      [getGetUser200Response(), { status: 200 }],
      [getGetUser400Response(), { status: 400 }],
      [getGetUser401Response(), { status: 401 }],
      [getGetUser404Response(), { status: 404 }],
      [getGetUser500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/users/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/users/:id`, async () => {
    const resultArray = [
      [getUpdateUser200Response(), { status: 200 }],
      [getUpdateUser400Response(), { status: 400 }],
      [getUpdateUser401Response(), { status: 401 }],
      [getUpdateUser404Response(), { status: 404 }],
      [getUpdateUser422Response(), { status: 422 }],
      [getUpdateUser500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/users/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/users/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteUser400Response(), { status: 400 }],
      [getDeleteUser401Response(), { status: 401 }],
      [getDeleteUser404Response(), { status: 404 }],
      [getDeleteUser500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/users/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/preferences`, async () => {
    const resultArray = [
      [getListPreference200Response(), { status: 200 }],
      [getListPreference400Response(), { status: 400 }],
      [getListPreference401Response(), { status: 401 }],
      [getListPreference404Response(), { status: 404 }],
      [getListPreference500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/preferences`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/preferences`, async () => {
    const resultArray = [
      [getStorePreference200Response(), { status: 200 }],
      [getStorePreference400Response(), { status: 400 }],
      [getStorePreference401Response(), { status: 401 }],
      [getStorePreference404Response(), { status: 404 }],
      [getStorePreference422Response(), { status: 422 }],
      [getStorePreference500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/preferences`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/preferences/:name`, async () => {
    const resultArray = [
      [getGetPreference200Response(), { status: 200 }],
      [getGetPreference400Response(), { status: 400 }],
      [getGetPreference401Response(), { status: 401 }],
      [getGetPreference404Response(), { status: 404 }],
      [getGetPreference500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/preferences/:name`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/preferences/:name`, async () => {
    const resultArray = [
      [getUpdatePreference200Response(), { status: 200 }],
      [getUpdatePreference400Response(), { status: 400 }],
      [getUpdatePreference401Response(), { status: 401 }],
      [getUpdatePreference404Response(), { status: 404 }],
      [getUpdatePreference422Response(), { status: 422 }],
      [getUpdatePreference500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/preferences/:name`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/webhooks/:id/messages`, async () => {
    const resultArray = [
      [getGetWebhookMessages200Response(), { status: 200 }],
      [getGetWebhookMessages400Response(), { status: 400 }],
      [getGetWebhookMessages401Response(), { status: 401 }],
      [getGetWebhookMessages404Response(), { status: 404 }],
      [getGetWebhookMessages500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/webhooks/:id/messages`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/v1/webhooks/:id/messages/:messageId`, async () => {
    const resultArray = [
      [getGetSingleWebhookMessage200Response(), { status: 200 }],
      [getGetSingleWebhookMessage400Response(), { status: 400 }],
      [getGetSingleWebhookMessage401Response(), { status: 401 }],
      [getGetSingleWebhookMessage404Response(), { status: 404 }],
      [getGetSingleWebhookMessage500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /v1/webhooks/:id/messages/:messageId`) % resultArray.length
      ],
    );
  }),
  http.delete(`${baseURL}/v1/webhooks/:id/messages/:messageId`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteWebhookMessage400Response(), { status: 400 }],
      [getDeleteWebhookMessage401Response(), { status: 401 }],
      [getDeleteWebhookMessage404Response(), { status: 404 }],
      [getDeleteWebhookMessage500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`delete /v1/webhooks/:id/messages/:messageId`) % resultArray.length
      ],
    );
  }),
  http.get(
    `${baseURL}/v1/webhooks/:id/messages/:messageId/attempts`,
    async () => {
      const resultArray = [
        [getGetWebhookMessageAttempts200Response(), { status: 200 }],
        [getGetWebhookMessageAttempts400Response(), { status: 400 }],
        [getGetWebhookMessageAttempts401Response(), { status: 401 }],
        [getGetWebhookMessageAttempts404Response(), { status: 404 }],
        [getGetWebhookMessageAttempts500Response(), { status: 500 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`get /v1/webhooks/:id/messages/:messageId/attempts`) %
            resultArray.length
        ],
      );
    },
  ),
  http.get(
    `${baseURL}/v1/webhooks/:id/messages/:messageId/attempts/:attemptId`,
    async () => {
      const resultArray = [
        [getGetSingleWebhookMessageAttempt200Response(), { status: 200 }],
        [getGetSingleWebhookMessageAttempt400Response(), { status: 400 }],
        [getGetSingleWebhookMessageAttempt401Response(), { status: 401 }],
        [getGetSingleWebhookMessageAttempt404Response(), { status: 404 }],
        [getGetSingleWebhookMessageAttempt500Response(), { status: 500 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`get /v1/webhooks/:id/messages/:messageId/attempts/:attemptId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.delete(
    `${baseURL}/v1/webhooks/:id/messages/:messageId/attempts/:attemptId`,
    async () => {
      const resultArray = [
        [undefined, { status: 204 }],
        [getDeleteWebhookMessageAttempt400Response(), { status: 400 }],
        [getDeleteWebhookMessageAttempt401Response(), { status: 401 }],
        [getDeleteWebhookMessageAttempt404Response(), { status: 404 }],
        [getDeleteWebhookMessageAttempt500Response(), { status: 500 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(
            `delete /v1/webhooks/:id/messages/:messageId/attempts/:attemptId`,
          ) % resultArray.length
        ],
      );
    },
  ),
  http.post(`${baseURL}/v1/webhooks/:id/submit`, async () => {
    const resultArray = [
      [undefined, { status: 200 }],
      [undefined, { status: 204 }],
      [undefined, { status: 404 }],
      [undefined, { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/webhooks/:id/submit`) % resultArray.length],
    );
  }),
  http.post(
    `${baseURL}/v1/webhooks/:id/trigger-transaction/:transactionId`,
    async () => {
      const resultArray = [
        [undefined, { status: 204 }],
        [undefined, { status: 404 }],
        [undefined, { status: 500 }],
      ];

      return HttpResponse.json(
        ...resultArray[
          next(`post /v1/webhooks/:id/trigger-transaction/:transactionId`) %
            resultArray.length
        ],
      );
    },
  ),
  http.get(`${baseURL}/v1/webhooks`, async () => {
    const resultArray = [
      [getListWebhook200Response(), { status: 200 }],
      [getListWebhook400Response(), { status: 400 }],
      [getListWebhook401Response(), { status: 401 }],
      [getListWebhook404Response(), { status: 404 }],
      [getListWebhook500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/webhooks`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/v1/webhooks`, async () => {
    const resultArray = [
      [getStoreWebhook200Response(), { status: 200 }],
      [getStoreWebhook400Response(), { status: 400 }],
      [getStoreWebhook401Response(), { status: 401 }],
      [getStoreWebhook404Response(), { status: 404 }],
      [getStoreWebhook422Response(), { status: 422 }],
      [getStoreWebhook500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`post /v1/webhooks`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/v1/webhooks/:id`, async () => {
    const resultArray = [
      [getGetWebhook200Response(), { status: 200 }],
      [getGetWebhook400Response(), { status: 400 }],
      [getGetWebhook401Response(), { status: 401 }],
      [getGetWebhook404Response(), { status: 404 }],
      [getGetWebhook500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /v1/webhooks/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/v1/webhooks/:id`, async () => {
    const resultArray = [
      [getUpdateWebhook200Response(), { status: 200 }],
      [getUpdateWebhook400Response(), { status: 400 }],
      [getUpdateWebhook401Response(), { status: 401 }],
      [getUpdateWebhook404Response(), { status: 404 }],
      [getUpdateWebhook422Response(), { status: 422 }],
      [getUpdateWebhook500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`put /v1/webhooks/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/v1/webhooks/:id`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [getDeleteWebhook400Response(), { status: 400 }],
      [getDeleteWebhook401Response(), { status: 401 }],
      [getDeleteWebhook404Response(), { status: 404 }],
      [getDeleteWebhook500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`delete /v1/webhooks/:id`) % resultArray.length],
    );
  }),
];

export function getGetAccountsAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Checking Account",
    name_with_balance: "Checking Account ($123.45)",
    type: "Asset account",
    currency_id: "12",
    currency_name: "Euro",
    currency_code: "EUR",
    currency_symbol: "$",
    currency_decimal_places: 2,
  }));
}

export function getGetAccountsAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetAccountsAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetAccountsAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetAccountsAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetBillsAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Yearly bill",
    active: true,
  }));
}

export function getGetBillsAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetBillsAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetBillsAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetBillsAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetBudgetsAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Groceries",
  }));
}

export function getGetBudgetsAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetBudgetsAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetBudgetsAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetBudgetsAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetCategoriesAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Category X",
  }));
}

export function getGetCategoriesAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetCategoriesAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetCategoriesAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetCategoriesAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetCurrenciesAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Currency name",
    code: "EUR",
    symbol: "$",
    decimal_places: 2,
  }));
}

export function getGetCurrenciesAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetCurrenciesAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetCurrenciesAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetCurrenciesAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetCurrenciesCodeAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Currency name (XCN)",
    code: "EUR",
    symbol: "$",
    decimal_places: 2,
  }));
}

export function getGetCurrenciesCodeAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetCurrenciesCodeAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetCurrenciesCodeAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetCurrenciesCodeAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetObjectGroupsAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    title: "Object Group one",
    name: "Object Group one",
  }));
}

export function getGetObjectGroupsAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetObjectGroupsAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetObjectGroupsAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetObjectGroupsAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetPiggiesAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "New couch",
    currency_id: "12",
    currency_code: "EUR",
    currency_symbol: "$",
    currency_name: "Euro",
    currency_decimal_places: 2,
    object_group_id: "5",
    object_group_title: "Example Group",
  }));
}

export function getGetPiggiesAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetPiggiesAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetPiggiesAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetPiggiesAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetPiggiesBalanceAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "New couch",
    name_with_balance: "New couch ($ 12.34)",
    currency_id: "12",
    currency_code: "EUR",
    currency_symbol: "$",
    currency_decimal_places: 2,
    object_group_id: "5",
    object_group_title: "Example Group",
  }));
}

export function getGetPiggiesBalanceAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetPiggiesBalanceAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetPiggiesBalanceAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetPiggiesBalanceAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetRecurringAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Yearly bill",
    description: "Should trigger daily.",
  }));
}

export function getGetRecurringAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetRecurringAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetRecurringAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetRecurringAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetRuleGroupsAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Rule group one",
    description: "Some rule group.",
  }));
}

export function getGetRuleGroupsAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetRuleGroupsAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetRuleGroupsAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetRuleGroupsAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetRulesAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Rule one",
    description: "Useful rule.",
  }));
}

export function getGetRulesAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetRulesAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetRulesAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetRulesAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetTagAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "too-expensive-tag-example",
    tag: "too-expensive-tag-example",
  }));
}

export function getGetTagAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetTagAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetTagAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetTagAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetTransactionTypesAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    name: "Withdrawal",
    type: "Withdrawal",
  }));
}

export function getGetTransactionTypesAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetTransactionTypesAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetTransactionTypesAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetTransactionTypesAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetTransactionsAc200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    transaction_group_id: "2",
    name: "Transaction",
    description: "Transaction",
  }));
}

export function getGetTransactionsAc400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetTransactionsAc401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetTransactionsAc404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetTransactionsAc500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetTransactionsIdac200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "2",
    transaction_group_id: "2",
    name: "#12: Transaction",
    description: "#12: Transaction",
  }));
}

export function getGetTransactionsIdac400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetTransactionsIdac401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetTransactionsIdac404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetTransactionsIdac500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetChartAccountOverview200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    label: "Checking account",
    currency_id: "5",
    currency_code: "EUR",
    currency_symbol: "$",
    currency_decimal_places: 2,
    start_date: "2018-09-17T12:46:47+01:00",
    end_date: "2018-09-17T12:46:47+01:00",
    type: "line",
    yAxisID: faker.number.int(),
    entries: {},
  }));
}

export function getGetChartAccountOverview400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetChartAccountOverview401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetChartAccountOverview404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetChartAccountOverview500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getBulkUpdateTransactions400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getBulkUpdateTransactions401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getBulkUpdateTransactions404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getBulkUpdateTransactions500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDestroyData400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDestroyData401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDestroyData404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDestroyData500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportAccounts200Response() {
  return null;
}

export function getExportAccounts400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportAccounts401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportAccounts404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportAccounts500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportBills200Response() {
  return null;
}

export function getExportBills400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportBills401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportBills404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportBills500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportBudgets200Response() {
  return null;
}

export function getExportBudgets400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportBudgets401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportBudgets404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportBudgets500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportCategories200Response() {
  return null;
}

export function getExportCategories400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportCategories401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportCategories404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportCategories500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportPiggies200Response() {
  return null;
}

export function getExportPiggies400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportPiggies401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportPiggies404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportPiggies500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportRecurring200Response() {
  return null;
}

export function getExportRecurring400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportRecurring401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportRecurring404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportRecurring500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportRules200Response() {
  return null;
}

export function getExportRules400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportRules401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportRules404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportRules500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportTags200Response() {
  return null;
}

export function getExportTags400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportTags401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportTags404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportTags500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getExportTransactions200Response() {
  return null;
}

export function getExportTransactions400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getExportTransactions401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getExportTransactions404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getExportTransactions500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getPurgeData400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getPurgeData401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getPurgeData500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseExpense200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseExpense400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseExpense401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseExpense404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseExpense500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseAsset200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseAsset400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseAsset401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseAsset404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseAsset500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightIncomeRevenue200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightIncomeRevenue400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightIncomeRevenue401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightIncomeRevenue404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightIncomeRevenue500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightIncomeAsset200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightIncomeAsset400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightIncomeAsset401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightIncomeAsset404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightIncomeAsset500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightTransfers200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    in: "123.45",
    in_float: 123.45,
    out: "123.45",
    out_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightTransfers400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightTransfers401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightTransfers404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightTransfers500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseBill200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseNoBill200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseNoBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseNoBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseNoBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseNoBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseBudget200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseNoBudget200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseNoBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseNoBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseNoBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseNoBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseCategory200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseNoCategory200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseNoCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseNoCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseNoCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseNoCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightIncomeCategory200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightIncomeCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightIncomeCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightIncomeCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightIncomeCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightIncomeNoCategory200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightIncomeNoCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightIncomeNoCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightIncomeNoCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightIncomeNoCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightTransferCategory200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightTransferCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightTransferCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightTransferCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightTransferCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightTransferNoCategory200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightTransferNoCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightTransferNoCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightTransferNoCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightTransferNoCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseTag200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseNoTag200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseNoTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseNoTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseNoTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseNoTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightIncomeTag200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightIncomeTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightIncomeTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightIncomeTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightIncomeTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightIncomeNoTag200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightIncomeNoTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightIncomeNoTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightIncomeNoTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightIncomeNoTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightTransferTag200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: "123",
    name: "Land lord",
    difference: "-123.45",
    difference_float: -123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightTransferTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightTransferTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightTransferTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightTransferTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightTransferNoTag200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightTransferNoTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightTransferNoTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightTransferNoTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightTransferNoTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightExpenseTotal200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightExpenseTotal400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightExpenseTotal401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightExpenseTotal404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightExpenseTotal500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightIncomeTotal200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightIncomeTotal400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightIncomeTotal401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightIncomeTotal404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightIncomeTotal500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getInsightTransferTotal200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    difference: "123.45",
    difference_float: 123.45,
    currency_id: "5",
    currency_code: "EUR",
  }));
}

export function getInsightTransferTotal400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getInsightTransferTotal401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getInsightTransferTotal404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getInsightTransferTotal500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByAccount200Response() {
  return null;
}

export function getListTransactionByAccount400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByAccount401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByAccount404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByAccount500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAttachmentByAccount200Response() {
  return null;
}

export function getListAttachmentByAccount400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAttachmentByAccount401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAttachmentByAccount404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAttachmentByAccount500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListPiggyBankByAccount200Response() {
  return null;
}

export function getListPiggyBankByAccount400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListPiggyBankByAccount401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListPiggyBankByAccount404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListPiggyBankByAccount500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAccount200Response() {
  return null;
}

export function getListAccount400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAccount401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAccount404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAccount500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreAccount200Response() {
  return null;
}

export function getStoreAccount400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreAccount401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreAccount404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreAccount422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreAccount500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetAccount200Response() {
  return null;
}

export function getGetAccount400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetAccount401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetAccount404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetAccount500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateAccount200Response() {
  return null;
}

export function getUpdateAccount400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateAccount401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateAccount404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateAccount422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateAccount500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteAccount400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteAccount401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteAccount404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteAccount500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAttachment200Response() {
  return null;
}

export function getListAttachment400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAttachment401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAttachment404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAttachment500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreAttachment200Response() {
  return null;
}

export function getStoreAttachment400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreAttachment401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreAttachment404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreAttachment422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreAttachment500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetAttachment200Response() {
  return null;
}

export function getGetAttachment400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetAttachment401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetAttachment404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetAttachment500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateAttachment200Response() {
  return null;
}

export function getUpdateAttachment400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateAttachment401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateAttachment404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateAttachment422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateAttachment500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteAttachment400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteAttachment401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteAttachment404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteAttachment500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDownloadAttachment200Response() {
  return null;
}

export function getDownloadAttachment400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDownloadAttachment401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDownloadAttachment404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDownloadAttachment500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUploadAttachment400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUploadAttachment401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUploadAttachment404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUploadAttachment422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUploadAttachment500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAvailableBudget200Response() {
  return null;
}

export function getListAvailableBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAvailableBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAvailableBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAvailableBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetAvailableBudget200Response() {
  return null;
}

export function getGetAvailableBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetAvailableBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetAvailableBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetAvailableBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAttachmentByBill200Response() {
  return null;
}

export function getListAttachmentByBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAttachmentByBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAttachmentByBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAttachmentByBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListRuleByBill200Response() {
  return null;
}

export function getListRuleByBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListRuleByBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListRuleByBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListRuleByBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByBill200Response() {
  return null;
}

export function getListTransactionByBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListBill200Response() {
  return null;
}

export function getListBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreBill200Response() {
  return null;
}

export function getStoreBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreBill422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetBill200Response() {
  return null;
}

export function getGetBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateBill200Response() {
  return null;
}

export function getUpdateBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateBill422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteBill400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteBill401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteBill404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteBill500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByBudgetLimit200Response() {
  return null;
}

export function getListTransactionByBudgetLimit400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByBudgetLimit401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByBudgetLimit404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByBudgetLimit500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListBudgetLimitByBudget200Response() {
  return null;
}

export function getListBudgetLimitByBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListBudgetLimitByBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListBudgetLimitByBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListBudgetLimitByBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreBudgetLimit200Response() {
  return null;
}

export function getStoreBudgetLimit400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreBudgetLimit401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreBudgetLimit404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreBudgetLimit422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreBudgetLimit500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetBudgetLimit200Response() {
  return null;
}

export function getGetBudgetLimit400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetBudgetLimit401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetBudgetLimit404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetBudgetLimit500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateBudgetLimit200Response() {
  return null;
}

export function getUpdateBudgetLimit400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateBudgetLimit401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateBudgetLimit404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateBudgetLimit422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateBudgetLimit500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteBudgetLimit400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteBudgetLimit401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteBudgetLimit404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteBudgetLimit500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListBudgetLimit200Response() {
  return null;
}

export function getListBudgetLimit400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListBudgetLimit401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListBudgetLimit404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListBudgetLimit500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByBudget200Response() {
  return null;
}

export function getListTransactionByBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAttachmentByBudget200Response() {
  return null;
}

export function getListAttachmentByBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAttachmentByBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAttachmentByBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAttachmentByBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListBudget200Response() {
  return null;
}

export function getListBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreBudget200Response() {
  return null;
}

export function getStoreBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreBudget422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetBudget200Response() {
  return null;
}

export function getGetBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateBudget200Response() {
  return null;
}

export function getUpdateBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateBudget422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteBudget400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteBudget401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteBudget404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteBudget500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByCategory200Response() {
  return null;
}

export function getListTransactionByCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAttachmentByCategory200Response() {
  return null;
}

export function getListAttachmentByCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAttachmentByCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAttachmentByCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAttachmentByCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListCategory200Response() {
  return null;
}

export function getListCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreCategory200Response() {
  return null;
}

export function getStoreCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreCategory422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetCategory200Response() {
  return null;
}

export function getGetCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateCategory200Response() {
  return null;
}

export function getUpdateCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateCategory422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteCategory400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteCategory401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteCategory404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteCategory500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByLinkType200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      type: "transactions",
      id: "2",
      attributes: {
        created_at: "2018-09-17T12:46:47+01:00",
        updated_at: "2018-09-17T12:46:47+01:00",
        user: "3",
        group_title: "Split transaction title.",
        transactions: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          user: "3",
          transaction_journal_id: "10421",
          type: "withdrawal",
          date: "2018-09-17T12:46:47+01:00",
          order: faker.number.int(),
          currency_id: "12",
          currency_code: "EUR",
          currency_symbol: "$",
          currency_name: "Euro",
          currency_decimal_places: 2,
          foreign_currency_id: "17",
          foreign_currency_code: "USD",
          foreign_currency_symbol: "$",
          foreign_currency_decimal_places: 2,
          amount: "123.45",
          foreign_amount: "123.45",
          description: "Vegetables",
          source_id: "2",
          source_name: "Checking account",
          source_iban: "NL02ABNA0123456789",
          source_type: "Asset account",
          destination_id: "2",
          destination_name: "Buy and Large",
          destination_iban: "NL02ABNA0123456789",
          destination_type: "Asset account",
          budget_id: "4",
          budget_name: "Groceries",
          category_id: "43",
          category_name: "Groceries",
          bill_id: "111",
          bill_name: "Monthly rent",
          reconciled: faker.datatype.boolean(),
          notes: "Some example notes",
          tags: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
            ).keys(),
          ].map((_) => "Barbecue preparation"),
          internal_reference: faker.lorem.words(),
          external_id: faker.string.uuid(),
          external_url: faker.internet.url(),
          original_source: faker.lorem.words(),
          recurrence_id: faker.string.uuid(),
          recurrence_total: faker.number.int(),
          recurrence_count: 12,
          bunq_payment_id: faker.string.uuid(),
          import_hash_v2: faker.lorem.words(),
          sepa_cc: faker.lorem.words(),
          sepa_ct_op: faker.lorem.words(),
          sepa_ct_id: faker.string.uuid(),
          sepa_db: faker.lorem.words(),
          sepa_country: faker.lorem.words(),
          sepa_ep: faker.lorem.words(),
          sepa_ci: faker.lorem.words(),
          sepa_batch_id: faker.string.uuid(),
          interest_date: faker.date.past(),
          book_date: faker.date.past(),
          process_date: faker.date.past(),
          due_date: faker.date.past(),
          payment_date: faker.date.past(),
          invoice_date: faker.date.past(),
          latitude: 51.983333,
          longitude: 5.916667,
          zoom_level: 6,
          has_attachments: faker.datatype.boolean(),
        })),
      },
      links: {
        0: {
          rel: "self",
          uri: "/OBJECTS/1",
        },
        self: "https://demo.firefly-iii.org/api/v1/OBJECTS/1",
      },
    })),
    meta: {
      pagination: {
        total: 3,
        count: 20,
        per_page: 100,
        current_page: 1,
        total_pages: 1,
      },
    },
    links: {
      self: "https://demo.firefly-iii.org/api/v1/OBJECT?&page=4",
      first: "https://demo.firefly-iii.org/api/v1/OBJECT?&page=1",
      next: "https://demo.firefly-iii.org/api/v1/OBJECT?&page=3",
      prev: "https://demo.firefly-iii.org/api/v1/OBJECT?&page=2",
      last: "https://demo.firefly-iii.org/api/v1/OBJECT?&page=12",
    },
  };
}

export function getListTransactionByLinkType400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByLinkType401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByLinkType404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByLinkType500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListLinkType200Response() {
  return null;
}

export function getListLinkType400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListLinkType401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListLinkType404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListLinkType500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreLinkType200Response() {
  return null;
}

export function getStoreLinkType400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreLinkType401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreLinkType404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreLinkType422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreLinkType500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetLinkType200Response() {
  return null;
}

export function getGetLinkType400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetLinkType401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetLinkType404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetLinkType500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateLinkType200Response() {
  return null;
}

export function getUpdateLinkType400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateLinkType401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateLinkType404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateLinkType422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateLinkType500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteLinkType400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteLinkType401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteLinkType404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteLinkType500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionLink200Response() {
  return null;
}

export function getListTransactionLink400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionLink401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionLink404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionLink500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreTransactionLink200Response() {
  return null;
}

export function getStoreTransactionLink400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreTransactionLink401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreTransactionLink404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreTransactionLink422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreTransactionLink500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetTransactionLink200Response() {
  return null;
}

export function getGetTransactionLink400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetTransactionLink401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetTransactionLink404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetTransactionLink500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteTransactionLink400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteTransactionLink401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteTransactionLink404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteTransactionLink500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateTransactionLink200Response() {
  return null;
}

export function getUpdateTransactionLink400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateTransactionLink401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateTransactionLink404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateTransactionLink422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateTransactionLink500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListPiggyBankByObjectGroup200Response() {
  return null;
}

export function getListPiggyBankByObjectGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListPiggyBankByObjectGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListPiggyBankByObjectGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListPiggyBankByObjectGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListBillByObjectGroup200Response() {
  return null;
}

export function getListBillByObjectGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListBillByObjectGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListBillByObjectGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListBillByObjectGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListObjectGroups200Response() {
  return null;
}

export function getListObjectGroups400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListObjectGroups401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListObjectGroups404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListObjectGroups500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetObjectGroup200Response() {
  return null;
}

export function getGetObjectGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetObjectGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetObjectGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetObjectGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateObjectGroup200Response() {
  return null;
}

export function getUpdateObjectGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateObjectGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateObjectGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateObjectGroup422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateObjectGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteObjectGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteObjectGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteObjectGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteObjectGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListEventByPiggyBank200Response() {
  return null;
}

export function getListEventByPiggyBank400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListEventByPiggyBank401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListEventByPiggyBank404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListEventByPiggyBank500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAttachmentByPiggyBank200Response() {
  return null;
}

export function getListAttachmentByPiggyBank400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAttachmentByPiggyBank401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAttachmentByPiggyBank404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAttachmentByPiggyBank500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListPiggyBank200Response() {
  return null;
}

export function getListPiggyBank400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListPiggyBank401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListPiggyBank404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListPiggyBank500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStorePiggyBank200Response() {
  return null;
}

export function getStorePiggyBank400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStorePiggyBank401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStorePiggyBank404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStorePiggyBank422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStorePiggyBank500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetPiggyBank200Response() {
  return null;
}

export function getGetPiggyBank400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetPiggyBank401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetPiggyBank404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetPiggyBank500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdatePiggyBank200Response() {
  return null;
}

export function getUpdatePiggyBank400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdatePiggyBank401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdatePiggyBank404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdatePiggyBank422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdatePiggyBank500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeletePiggyBank400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeletePiggyBank401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeletePiggyBank404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeletePiggyBank500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByRecurrence200Response() {
  return null;
}

export function getListTransactionByRecurrence400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByRecurrence401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByRecurrence404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByRecurrence500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListRecurrence200Response() {
  return null;
}

export function getListRecurrence400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListRecurrence401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListRecurrence404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListRecurrence500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreRecurrence200Response() {
  return null;
}

export function getStoreRecurrence400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreRecurrence401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreRecurrence404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreRecurrence422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreRecurrence500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetRecurrence200Response() {
  return null;
}

export function getGetRecurrence400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetRecurrence401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetRecurrence404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetRecurrence500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateRecurrence200Response() {
  return null;
}

export function getUpdateRecurrence400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateRecurrence401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateRecurrence404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateRecurrence422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateRecurrence500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteRecurrence400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteRecurrence401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteRecurrence404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteRecurrence500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListRuleByGroup200Response() {
  return null;
}

export function getListRuleByGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListRuleByGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListRuleByGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListRuleByGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getTestRuleGroup200Response() {
  return null;
}

export function getTestRuleGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getTestRuleGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getTestRuleGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getTestRuleGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getFireRuleGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getFireRuleGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getFireRuleGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getFireRuleGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListRuleGroup200Response() {
  return null;
}

export function getListRuleGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListRuleGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListRuleGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListRuleGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreRuleGroup200Response() {
  return null;
}

export function getStoreRuleGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreRuleGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreRuleGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreRuleGroup422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreRuleGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetRuleGroup200Response() {
  return null;
}

export function getGetRuleGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetRuleGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetRuleGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetRuleGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateRuleGroup200Response() {
  return null;
}

export function getUpdateRuleGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateRuleGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateRuleGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateRuleGroup422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateRuleGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteRuleGroup400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteRuleGroup401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteRuleGroup404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteRuleGroup500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getTestRule200Response() {
  return null;
}

export function getTestRule400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getTestRule401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getTestRule404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getTestRule500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getFireRule400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getFireRule401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getFireRule404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getFireRule500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListRule200Response() {
  return null;
}

export function getListRule400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListRule401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListRule404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListRule500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreRule200Response() {
  return null;
}

export function getStoreRule400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreRule401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreRule404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreRule422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreRule500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetRule200Response() {
  return null;
}

export function getGetRule400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetRule401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetRule404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetRule500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateRule200Response() {
  return null;
}

export function getUpdateRule400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateRule401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateRule404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateRule422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateRule500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteRule400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteRule401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteRule404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteRule500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAttachmentByTag200Response() {
  return null;
}

export function getListAttachmentByTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAttachmentByTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAttachmentByTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAttachmentByTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByTag200Response() {
  return null;
}

export function getListTransactionByTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTag200Response() {
  return null;
}

export function getListTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreTag200Response() {
  return null;
}

export function getStoreTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreTag422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetTag200Response() {
  return null;
}

export function getGetTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateTag200Response() {
  return null;
}

export function getUpdateTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateTag422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteTag400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteTag401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteTag404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteTag500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAccountByCurrency200Response() {
  return null;
}

export function getListAccountByCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAccountByCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAccountByCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAccountByCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAvailableBudgetByCurrency200Response() {
  return null;
}

export function getListAvailableBudgetByCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAvailableBudgetByCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAvailableBudgetByCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAvailableBudgetByCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListBillByCurrency200Response() {
  return null;
}

export function getListBillByCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListBillByCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListBillByCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListBillByCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListBudgetLimitByCurrency200Response() {
  return null;
}

export function getListBudgetLimitByCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListBudgetLimitByCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListBudgetLimitByCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListBudgetLimitByCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListRecurrenceByCurrency200Response() {
  return null;
}

export function getListRecurrenceByCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListRecurrenceByCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListRecurrenceByCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListRecurrenceByCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListRuleByCurrency200Response() {
  return null;
}

export function getListRuleByCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListRuleByCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListRuleByCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListRuleByCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransactionByCurrency200Response() {
  return null;
}

export function getListTransactionByCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransactionByCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransactionByCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransactionByCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListCurrency200Response() {
  return null;
}

export function getListCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreCurrency200Response() {
  return null;
}

export function getStoreCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreCurrency422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getEnableCurrency204Response() {
  return null;
}

export function getEnableCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getEnableCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getEnableCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getEnableCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDisableCurrency204Response() {
  return null;
}

export function getDisableCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDisableCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDisableCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDisableCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDefaultCurrency204Response() {
  return null;
}

export function getDefaultCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDefaultCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDefaultCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDefaultCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetCurrency200Response() {
  return null;
}

export function getGetCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateCurrency200Response() {
  return {
    data: {
      type: "currencies",
      id: "2",
      attributes: {
        created_at: "2018-09-17T12:46:47+01:00",
        updated_at: "2018-09-17T12:46:47+01:00",
        enabled: true,
        default: faker.datatype.boolean(),
        code: "AMS",
        name: "Ankh-Morpork dollar",
        symbol: "AM$",
        decimal_places: 2,
      },
    },
  };
}

export function getUpdateCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateCurrency422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetDefaultCurrency200Response() {
  return {
    data: {
      type: "currencies",
      id: "2",
      attributes: {
        created_at: "2018-09-17T12:46:47+01:00",
        updated_at: "2018-09-17T12:46:47+01:00",
        enabled: true,
        default: faker.datatype.boolean(),
        code: "AMS",
        name: "Ankh-Morpork dollar",
        symbol: "AM$",
        decimal_places: 2,
      },
    },
  };
}

export function getGetDefaultCurrency400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetDefaultCurrency401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetDefaultCurrency404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetDefaultCurrency500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListLinksByJournal200Response() {
  return null;
}

export function getListLinksByJournal400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListLinksByJournal401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListLinksByJournal404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListLinksByJournal500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetTransactionByJournal200Response() {
  return null;
}

export function getGetTransactionByJournal400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetTransactionByJournal401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetTransactionByJournal404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetTransactionByJournal500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteTransactionJournal400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteTransactionJournal401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteTransactionJournal404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteTransactionJournal500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListAttachmentByTransaction200Response() {
  return null;
}

export function getListAttachmentByTransaction400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListAttachmentByTransaction401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListAttachmentByTransaction404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListAttachmentByTransaction500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListEventByTransaction200Response() {
  return null;
}

export function getListEventByTransaction400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListEventByTransaction401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListEventByTransaction404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListEventByTransaction500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListTransaction200Response() {
  return null;
}

export function getListTransaction400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListTransaction401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListTransaction404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListTransaction500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreTransaction200Response() {
  return null;
}

export function getStoreTransaction400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreTransaction401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreTransaction404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreTransaction422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreTransaction500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetTransaction200Response() {
  return null;
}

export function getGetTransaction400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetTransaction401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetTransaction404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetTransaction500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateTransaction200Response() {
  return null;
}

export function getUpdateTransaction400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateTransaction401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateTransaction404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateTransaction422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateTransaction500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteTransaction400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteTransaction401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteTransaction404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteTransaction500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getSearchAccounts200Response() {
  return null;
}

export function getSearchAccounts400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getSearchAccounts401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getSearchAccounts404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getSearchAccounts500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getSearchTransactions200Response() {
  return null;
}

export function getSearchTransactions400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getSearchTransactions401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getSearchTransactions404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getSearchTransactions500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetBasicSummary200Response() {
  return null;
}

export function getGetBasicSummary400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetBasicSummary401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetBasicSummary404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetBasicSummary500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetAbout200Response() {
  return {
    data: {
      version: "5.8.0-alpha.1",
      api_version: "5.8.0-alpha.1",
      php_version: "8.1.5",
      os: "Linux",
      driver: "mysql",
    },
  };
}

export function getGetAbout400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetAbout401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetAbout404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetAbout500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetCurrentUser200Response() {
  return null;
}

export function getGetCurrentUser400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetCurrentUser401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetCurrentUser404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetCurrentUser500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetConfiguration200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    title: "configuration.is_demo_site",
    value: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      faker.lorem.words(),
      {},
      [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => "EUR"),
    ]),
    editable: true,
  }));
}

export function getGetConfiguration400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetConfiguration401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetConfiguration404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetConfiguration500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetSingleConfiguration200Response() {
  return {
    data: {
      title: "configuration.is_demo_site",
      value: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        faker.lorem.words(),
        {},
        [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => "EUR"),
      ]),
      editable: true,
    },
  };
}

export function getGetSingleConfiguration400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetSingleConfiguration401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetSingleConfiguration404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetSingleConfiguration500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getSetConfiguration200Response() {
  return {
    data: {
      title: "configuration.is_demo_site",
      value: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        faker.lorem.words(),
        {},
        [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => "EUR"),
      ]),
      editable: true,
    },
  };
}

export function getSetConfiguration400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getSetConfiguration401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getSetConfiguration404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getSetConfiguration422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getSetConfiguration500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetCron200Response() {
  return {
    recurring_transactions: {
      job_fired: true,
      job_succeeded: true,
      job_errored: faker.datatype.boolean(),
      message: "Cron result message",
    },
    auto_budgets: {
      job_fired: true,
      job_succeeded: true,
      job_errored: faker.datatype.boolean(),
      message: "Cron result message",
    },
    telemetry: {
      job_fired: true,
      job_succeeded: true,
      job_errored: faker.datatype.boolean(),
      message: "Cron result message",
    },
  };
}

export function getGetCron400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetCron401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetCron404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetCron500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListUser200Response() {
  return null;
}

export function getListUser400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListUser401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListUser404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListUser500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreUser200Response() {
  return null;
}

export function getStoreUser400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreUser401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreUser404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreUser422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreUser500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetUser200Response() {
  return null;
}

export function getGetUser400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetUser401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetUser404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetUser500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateUser200Response() {
  return null;
}

export function getUpdateUser400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateUser401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateUser404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateUser422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateUser500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteUser400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteUser401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteUser404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteUser500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListPreference200Response() {
  return null;
}

export function getListPreference400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListPreference401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListPreference404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListPreference500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStorePreference200Response() {
  return null;
}

export function getStorePreference400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStorePreference401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStorePreference404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStorePreference422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStorePreference500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetPreference200Response() {
  return null;
}

export function getGetPreference400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetPreference401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetPreference404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetPreference500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdatePreference200Response() {
  return null;
}

export function getUpdatePreference400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdatePreference401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdatePreference404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdatePreference422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdatePreference500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetWebhookMessages200Response() {
  return null;
}

export function getGetWebhookMessages400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetWebhookMessages401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetWebhookMessages404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetWebhookMessages500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetSingleWebhookMessage200Response() {
  return null;
}

export function getGetSingleWebhookMessage400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetSingleWebhookMessage401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetSingleWebhookMessage404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetSingleWebhookMessage500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteWebhookMessage400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteWebhookMessage401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteWebhookMessage404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteWebhookMessage500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetWebhookMessageAttempts200Response() {
  return null;
}

export function getGetWebhookMessageAttempts400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetWebhookMessageAttempts401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetWebhookMessageAttempts404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetWebhookMessageAttempts500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetSingleWebhookMessageAttempt200Response() {
  return null;
}

export function getGetSingleWebhookMessageAttempt400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetSingleWebhookMessageAttempt401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetSingleWebhookMessageAttempt404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetSingleWebhookMessageAttempt500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteWebhookMessageAttempt400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteWebhookMessageAttempt401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteWebhookMessageAttempt404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteWebhookMessageAttempt500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getListWebhook200Response() {
  return null;
}

export function getListWebhook400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getListWebhook401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getListWebhook404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getListWebhook500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getStoreWebhook200Response() {
  return null;
}

export function getStoreWebhook400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getStoreWebhook401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getStoreWebhook404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getStoreWebhook422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getStoreWebhook500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getGetWebhook200Response() {
  return null;
}

export function getGetWebhook400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getGetWebhook401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getGetWebhook404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getGetWebhook500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getUpdateWebhook200Response() {
  return null;
}

export function getUpdateWebhook400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getUpdateWebhook401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getUpdateWebhook404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getUpdateWebhook422Response() {
  return {
    message: "The given data was invalid.",
    errors: {
      email: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      role: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      blocked_code: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      name: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      type: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      iban: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      start: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      end: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
      date: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
  };
}

export function getUpdateWebhook500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}

export function getDeleteWebhook400Response() {
  return {
    message: "Bad Request",
    exception: "BadRequestHttpException",
  };
}

export function getDeleteWebhook401Response() {
  return {
    message: "Unauthenticated",
    exception: "AuthenticationException",
  };
}

export function getDeleteWebhook404Response() {
  return {
    message: "Resource not found",
    exception: "NotFoundHttpException",
  };
}

export function getDeleteWebhook500Response() {
  return {
    message: "Internal Exception",
    exception: "InternalException",
  };
}
